{
    "docs": [
        {
            "location": "/", 
            "text": "Siddhi Core Libraries\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n  \n\n\nSiddhi\n is a cloud native \nStreaming\n and \nComplex Event Processing\n engine that understands \nStreaming SQL queries\n in order to capture events from diverse data sources, process them, detect complex conditions, and publish output to various endpoints in real time.\n\n\nSiddhi Core Libraries\n contains the essential core libraries need for Siddhi execution such as \nsiddhi-core\n, \nsiddhi-query-api\n, \nsiddhi-query-compiler\n, and \nsiddhi-annotations\n.\n\n\nOverview\n\n\n\n\nSiddhi can can run as an embedded Java and Python library, as a micro service on bare metal, VM, and Docker and natively in Kubernetes. \n\n\nSiddhi provides web-based graphical and textual tooling for development.\n\n\nFor information on \nSiddhi\n and it's features refer \nSiddhi Documentation\n. \n\n\nDownload\n\n\nDownload Siddhi Core Libraries;\n\n\n\n\nVersions 5.x and above with group id \nio.siddhi.*\n from \nhere\n.\n\n\nVersions 4.x and lower with group id \norg.wso2.siddhi.*\n from \nhere\n.\n\n\n\n\nDownload Siddhi tooling and runtime distributions \nhere\n.\n\n\nGet Started!\n\n\nGet started with Siddhi in a few minutes by following the \nSiddhi Quick Start Guide\n. \n\n\nFor more information on using Siddhi refer \nSiddhi Documentation\n. \n\n\nLatest API Docs\n\n\nLatest API Docs is \n5.1.1\n.\n\n\nSupport and Contribution\n\n\n\n\n\n\nWe encourage users to ask questions and get support via \nStackOverflow\n, make sure to add the \nsiddhi\n tag to the issue for better response.\n\n\n\n\n\n\nIf you find any issues related to the extension please report them on \nthe issue tracker\n.\n\n\n\n\n\n\nFor production support and other contribution related information refer \nSiddhi Community\n documentation.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#siddhi-core-libraries", 
            "text": "Siddhi  is a cloud native  Streaming  and  Complex Event Processing  engine that understands  Streaming SQL queries  in order to capture events from diverse data sources, process them, detect complex conditions, and publish output to various endpoints in real time.  Siddhi Core Libraries  contains the essential core libraries need for Siddhi execution such as  siddhi-core ,  siddhi-query-api ,  siddhi-query-compiler , and  siddhi-annotations .", 
            "title": "Siddhi Core Libraries"
        }, 
        {
            "location": "/#overview", 
            "text": "Siddhi can can run as an embedded Java and Python library, as a micro service on bare metal, VM, and Docker and natively in Kubernetes.   Siddhi provides web-based graphical and textual tooling for development.  For information on  Siddhi  and it's features refer  Siddhi Documentation .", 
            "title": "Overview"
        }, 
        {
            "location": "/#download", 
            "text": "Download Siddhi Core Libraries;   Versions 5.x and above with group id  io.siddhi.*  from  here .  Versions 4.x and lower with group id  org.wso2.siddhi.*  from  here .   Download Siddhi tooling and runtime distributions  here .", 
            "title": "Download"
        }, 
        {
            "location": "/#get-started", 
            "text": "Get started with Siddhi in a few minutes by following the  Siddhi Quick Start Guide .   For more information on using Siddhi refer  Siddhi Documentation .", 
            "title": "Get Started!"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  5.1.1 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#support-and-contribution", 
            "text": "We encourage users to ask questions and get support via  StackOverflow , make sure to add the  siddhi  tag to the issue for better response.    If you find any issues related to the extension please report them on  the issue tracker .    For production support and other contribution related information refer  Siddhi Community  documentation.", 
            "title": "Support and Contribution"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v5.1.1\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\nSyntax\n\n\nLONG\n count()\n\nLONG\n count(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one parameter. It can belong to any one of the available types.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nThis returns the count of distinct occurrences for a given arg.\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe object for which the number of distinct occurences needs to be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns '3' when the available values are as follows.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\nThe three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg, \nINT|LONG|DOUBLE|FLOAT\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg, \nINT|LONG|DOUBLE|FLOAT\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho)\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\nSyntax\n\n\nlog()\nlog(\nSTRING\n log.message)\nlog(\nBOOL\n is.event.logged)\nlog(\nSTRING\n log.message, \nBOOL\n is.event.logged)\nlog(\nSTRING\n priority, \nSTRING\n log.message)\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n :\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log()\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 6\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks.\n\n\nSyntax\n\n\nbatch()\nbatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of a chunk\n\n        \nIf length value was not given it assign 0 as length and process the whole batch as once\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression.\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that resets the window.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#cron('*/5 * * * * ?')\nselect symbol, sum(price) as totalPrice \ninsert into OutputStream;\n\n\n\n\nThis let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StockEventStream (symbol string, price float, volume int)\ndefine window StockEventWindow (symbol string, price float, volume int) cron('*/5 * * * * ?');\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow \nselect symbol, sum(price) as totalPrice\ninsert into OutputStream ;\n\n\n\n\nThe defined window will let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.\n\n\n\ndelay \n(Window)\n\n\nA delay window holds events for a specific time period that is regarded as a delay period before processing them.\n\n\nSyntax\n\n\ndelay(\nINT|LONG|TIME\n window.delay)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.delay\n\n        \nThe time period (specified in sec, min, ms) for which  the window should delay the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;\n\n\n\n\nIn this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time)\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout, \nBOOL\n replace.with.batchtime)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nreplace.with.batchtime\n\n        \nThis indicates to replace the expired event timeStamp as the batch end timeStamp\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nDeprecated\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count)\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry.\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window StockEventWindow (symbol string, price float, volume int) length(10) output all events;\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n@info(name = 'query1')\n\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will process last 10 events in a sliding manner.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds and process a number of events as specified in the window.length.\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\nlengthBatch(\nINT\n window.length, \nBOOL\n stream.current.event)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstream.current.event\n\n        \nLet the window stream the current events out as and when they arrive to the window while expiring them in batches.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10)\nselect symbol, sum(price) as price \ninsert into OutputStream;\n\n\n\n\nThis collect and process 10 events as a batch and output them.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;\n\n\n\n\nThis window sends the arriving events directly to the output letting the \nsumPrice\n to increase gradually, after every 10 events it clears the window as a batch and resets the \nsumPrice\n to zero.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;\n\n\n\n\nThis uses an defined window to process 10 events  as a batch and output all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nDeprecated\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold)\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound)\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \nsupport.threshold\n/10\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsession \n(Window)\n\n\nThis is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key.\nThere can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.\n\n\nSyntax\n\n\nsession(\nINT|LONG|TIME\n window.session)\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key)\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key, \nINT|LONG|TIME\n window.allowed.latency)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.session\n\n        \nThe time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.key\n\n        \nThe grouping attribute for events.\n\n        \ndefault-key\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nwindow.allowed.latency\n\n        \nThis specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter).\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;\n\n\n\n\nThis query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute)\nsort(\nINT\n window.length, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute, \nSTRING\n order, \nSTRING\n ...)\nsort(\nINT\n window.length, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute, \nSTRING\n order, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\nDOUBLE\nINT\nLONG\nFLOAT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch.\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time)\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT|LONG\n start.time)\ntimeBatch(\nINT|LONG|TIME\n window.time, \nBOOL\n stream.current.event)\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT|LONG\n start.time, \nBOOL\n stream.current.event)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period in which the window process the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nstream.current.event\n\n        \nLet the window stream the current events out as and when they arrive to the window while expiring them in batches.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec)\nselect symbol, sum(price) as price \ninsert into OutputStream;\n\n\n\n\nThis collect and process incoming events as a batch every 20 seconds and output them.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;\n\n\n\n\nThis window sends the arriving events directly to the output letting the \nsumPrice\n to increase gradually and on every 20 second interval it clears the window as a batch resetting the \nsumPrice\n to zero.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;\n\n\n\n\nThis uses an defined window to process events arrived every 20 seconds as a batch and output all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v511", 
            "text": "", 
            "title": "API Docs - v5.1.1"
        }, 
        {
            "location": "/api/latest/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/latest/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         Yes \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count() LONG  count( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one parameter. It can belong to any one of the available types. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         Yes \n         Yes \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#distinctcount-aggregate-function", 
            "text": "This returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The object for which the number of distinct occurences needs to be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         Yes \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/latest/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/latest/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/latest/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         Yes \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/latest/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         Yes \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/latest/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/latest/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/latest/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/latest/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         Yes \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/latest/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/latest/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/latest/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/latest/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/latest/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/latest/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/latest/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg,  INT|LONG|DOUBLE|FLOAT  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/latest/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg,  INT|LONG|DOUBLE|FLOAT  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/latest/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/latest/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x   y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho)\npol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         Yes \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         Yes \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         Yes \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/latest/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log()\nlog( STRING  log.message)\nlog( BOOL  is.event.logged)\nlog( STRING  log.message,  BOOL  is.event.logged)\nlog( STRING  priority,  STRING  log.message)\nlog( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n          : \n         STRING \n         Yes \n         Yes \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log()\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 6  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks.  Syntax  batch()\nbatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The length of a chunk \n         If length value was not given it assign 0 as length and process the whole batch as once \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/latest/#cron-window", 
            "text": "This window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that resets the window. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#cron('*/5 * * * * ?')\nselect symbol, sum(price) as totalPrice \ninsert into OutputStream;  This let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.  EXAMPLE 2  define stream StockEventStream (symbol string, price float, volume int)\ndefine window StockEventWindow (symbol string, price float, volume int) cron('*/5 * * * * ?');\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow \nselect symbol, sum(price) as totalPrice\ninsert into OutputStream ;  The defined window will let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/latest/#delay-window", 
            "text": "A delay window holds events for a specific time period that is regarded as a delay period before processing them.  Syntax  delay( INT|LONG|TIME  window.delay)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.delay \n         The time period (specified in sec, min, ms) for which  the window should delay the events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;  In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.", 
            "title": "delay (Window)"
        }, 
        {
            "location": "/api/latest/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         Yes \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/latest/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time)\nexternalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time)\nexternalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)\nexternalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout,  BOOL  replace.with.batchtime)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         Yes \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         Yes \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         replace.with.batchtime \n         This indicates to replace the expired event timeStamp as the batch end timeStamp \n         System waits till an event from next batch arrives to flush current batch \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/latest/#frequent-window", 
            "text": "Deprecated  This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count)\nfrequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/latest/#length-window", 
            "text": "A sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window StockEventWindow (symbol string, price float, volume int) length(10) output all events;\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n@info(name = 'query1')\n\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will process last 10 events in a sliding manner.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/latest/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds and process a number of events as specified in the window.length.  Syntax  lengthBatch( INT  window.length)\nlengthBatch( INT  window.length,  BOOL  stream.current.event)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n     \n     \n         stream.current.event \n         Let the window stream the current events out as and when they arrive to the window while expiring them in batches. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10)\nselect symbol, sum(price) as price \ninsert into OutputStream;  This collect and process 10 events as a batch and output them.  EXAMPLE 2  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;  This window sends the arriving events directly to the output letting the  sumPrice  to increase gradually, after every 10 events it clears the window as a batch and resets the  sumPrice  to zero.  EXAMPLE 3  define stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;  This uses an defined window to process 10 events  as a batch and output all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/latest/#lossyfrequent-window", 
            "text": "Deprecated  This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold)\nlossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound)\nlossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         support.threshold /10 \n         DOUBLE \n         Yes \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/latest/#session-window", 
            "text": "This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. There can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.  Syntax  session( INT|LONG|TIME  window.session)\nsession( INT|LONG|TIME  window.session,  STRING  window.key)\nsession( INT|LONG|TIME  window.session,  STRING  window.key,  INT|LONG|TIME  window.allowed.latency)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.session \n         The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.key \n         The grouping attribute for events. \n         default-key \n         STRING \n         Yes \n         Yes \n     \n     \n         window.allowed.latency \n         This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;  This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.", 
            "title": "session (Window)"
        }, 
        {
            "location": "/api/latest/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute)\nsort( INT  window.length,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute,  STRING  order,  STRING  ...)\nsort( INT  window.length,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute,  STRING  order,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING DOUBLE INT LONG FLOAT LONG \n         No \n         Yes \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/latest/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/latest/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch.  Syntax  timeBatch( INT|LONG|TIME  window.time)\ntimeBatch( INT|LONG|TIME  window.time,  INT|LONG  start.time)\ntimeBatch( INT|LONG|TIME  window.time,  BOOL  stream.current.event)\ntimeBatch( INT|LONG|TIME  window.time,  INT|LONG  start.time,  BOOL  stream.current.event)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period in which the window process the events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT LONG \n         Yes \n         No \n     \n     \n         stream.current.event \n         Let the window stream the current events out as and when they arrive to the window while expiring them in batches. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec)\nselect symbol, sum(price) as price \ninsert into OutputStream;  This collect and process incoming events as a batch every 20 seconds and output them.  EXAMPLE 2  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;  This window sends the arriving events directly to the output letting the  sumPrice  to increase gradually and on every 20 second interval it clears the window as a batch resetting the  sumPrice  to zero.  EXAMPLE 3  define stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;  This uses an defined window to process events arrived every 20 seconds as a batch and output all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/latest/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/latest/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/latest/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/latest/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/latest/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/latest/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/latest/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/latest/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/latest/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/latest/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/5.1.1/", 
            "text": "API Docs - v5.1.1\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\nSyntax\n\n\nLONG\n count()\n\nLONG\n count(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one parameter. It can belong to any one of the available types.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nThis returns the count of distinct occurrences for a given arg.\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe object for which the number of distinct occurences needs to be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns '3' when the available values are as follows.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\nThe three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg, \nINT|LONG|DOUBLE|FLOAT\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg, \nINT|LONG|DOUBLE|FLOAT\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho)\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\nSyntax\n\n\nlog()\nlog(\nSTRING\n log.message)\nlog(\nBOOL\n is.event.logged)\nlog(\nSTRING\n log.message, \nBOOL\n is.event.logged)\nlog(\nSTRING\n priority, \nSTRING\n log.message)\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n :\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log()\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 6\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks.\n\n\nSyntax\n\n\nbatch()\nbatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of a chunk\n\n        \nIf length value was not given it assign 0 as length and process the whole batch as once\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression.\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that resets the window.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#cron('*/5 * * * * ?')\nselect symbol, sum(price) as totalPrice \ninsert into OutputStream;\n\n\n\n\nThis let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StockEventStream (symbol string, price float, volume int)\ndefine window StockEventWindow (symbol string, price float, volume int) cron('*/5 * * * * ?');\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow \nselect symbol, sum(price) as totalPrice\ninsert into OutputStream ;\n\n\n\n\nThe defined window will let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.\n\n\n\ndelay \n(Window)\n\n\nA delay window holds events for a specific time period that is regarded as a delay period before processing them.\n\n\nSyntax\n\n\ndelay(\nINT|LONG|TIME\n window.delay)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.delay\n\n        \nThe time period (specified in sec, min, ms) for which  the window should delay the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;\n\n\n\n\nIn this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time)\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout, \nBOOL\n replace.with.batchtime)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nreplace.with.batchtime\n\n        \nThis indicates to replace the expired event timeStamp as the batch end timeStamp\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nDeprecated\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count)\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry.\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window StockEventWindow (symbol string, price float, volume int) length(10) output all events;\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n@info(name = 'query1')\n\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will process last 10 events in a sliding manner.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds and process a number of events as specified in the window.length.\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\nlengthBatch(\nINT\n window.length, \nBOOL\n stream.current.event)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstream.current.event\n\n        \nLet the window stream the current events out as and when they arrive to the window while expiring them in batches.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10)\nselect symbol, sum(price) as price \ninsert into OutputStream;\n\n\n\n\nThis collect and process 10 events as a batch and output them.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;\n\n\n\n\nThis window sends the arriving events directly to the output letting the \nsumPrice\n to increase gradually, after every 10 events it clears the window as a batch and resets the \nsumPrice\n to zero.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;\n\n\n\n\nThis uses an defined window to process 10 events  as a batch and output all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nDeprecated\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold)\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound)\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \nsupport.threshold\n/10\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsession \n(Window)\n\n\nThis is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key.\nThere can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.\n\n\nSyntax\n\n\nsession(\nINT|LONG|TIME\n window.session)\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key)\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key, \nINT|LONG|TIME\n window.allowed.latency)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.session\n\n        \nThe time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.key\n\n        \nThe grouping attribute for events.\n\n        \ndefault-key\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nwindow.allowed.latency\n\n        \nThis specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter).\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;\n\n\n\n\nThis query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute)\nsort(\nINT\n window.length, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute, \nSTRING\n order, \nSTRING\n ...)\nsort(\nINT\n window.length, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute, \nSTRING\n order, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\nDOUBLE\nINT\nLONG\nFLOAT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch.\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time)\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT|LONG\n start.time)\ntimeBatch(\nINT|LONG|TIME\n window.time, \nBOOL\n stream.current.event)\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT|LONG\n start.time, \nBOOL\n stream.current.event)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period in which the window process the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nstream.current.event\n\n        \nLet the window stream the current events out as and when they arrive to the window while expiring them in batches.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec)\nselect symbol, sum(price) as price \ninsert into OutputStream;\n\n\n\n\nThis collect and process incoming events as a batch every 20 seconds and output them.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;\n\n\n\n\nThis window sends the arriving events directly to the output letting the \nsumPrice\n to increase gradually and on every 20 second interval it clears the window as a batch resetting the \nsumPrice\n to zero.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;\n\n\n\n\nThis uses an defined window to process events arrived every 20 seconds as a batch and output all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "5.1.1"
        }, 
        {
            "location": "/api/5.1.1/#api-docs-v511", 
            "text": "", 
            "title": "API Docs - v5.1.1"
        }, 
        {
            "location": "/api/5.1.1/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/5.1.1/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         Yes \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.1/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.1/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count() LONG  count( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one parameter. It can belong to any one of the available types. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         Yes \n         Yes \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.1/#distinctcount-aggregate-function", 
            "text": "This returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The object for which the number of distinct occurences needs to be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.1/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.1/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.1/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.1/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.1/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         Yes \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.1/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.1/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.1/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.1/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/5.1.1/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/5.1.1/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/5.1.1/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         Yes \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/5.1.1/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         Yes \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/5.1.1/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/5.1.1/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/5.1.1/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/5.1.1/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         Yes \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/5.1.1/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/5.1.1/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/5.1.1/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/5.1.1/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/5.1.1/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/5.1.1/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/5.1.1/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg,  INT|LONG|DOUBLE|FLOAT  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/5.1.1/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg,  INT|LONG|DOUBLE|FLOAT  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/5.1.1/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/5.1.1/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x   y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho)\npol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         Yes \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         Yes \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         Yes \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/5.1.1/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log()\nlog( STRING  log.message)\nlog( BOOL  is.event.logged)\nlog( STRING  log.message,  BOOL  is.event.logged)\nlog( STRING  priority,  STRING  log.message)\nlog( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n          : \n         STRING \n         Yes \n         Yes \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log()\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 6  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/5.1.1/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks.  Syntax  batch()\nbatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The length of a chunk \n         If length value was not given it assign 0 as length and process the whole batch as once \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/5.1.1/#cron-window", 
            "text": "This window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that resets the window. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#cron('*/5 * * * * ?')\nselect symbol, sum(price) as totalPrice \ninsert into OutputStream;  This let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.  EXAMPLE 2  define stream StockEventStream (symbol string, price float, volume int)\ndefine window StockEventWindow (symbol string, price float, volume int) cron('*/5 * * * * ?');\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow \nselect symbol, sum(price) as totalPrice\ninsert into OutputStream ;  The defined window will let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/5.1.1/#delay-window", 
            "text": "A delay window holds events for a specific time period that is regarded as a delay period before processing them.  Syntax  delay( INT|LONG|TIME  window.delay)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.delay \n         The time period (specified in sec, min, ms) for which  the window should delay the events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;  In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.", 
            "title": "delay (Window)"
        }, 
        {
            "location": "/api/5.1.1/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         Yes \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/5.1.1/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time)\nexternalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time)\nexternalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)\nexternalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout,  BOOL  replace.with.batchtime)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         Yes \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         Yes \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         replace.with.batchtime \n         This indicates to replace the expired event timeStamp as the batch end timeStamp \n         System waits till an event from next batch arrives to flush current batch \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/5.1.1/#frequent-window", 
            "text": "Deprecated  This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count)\nfrequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/5.1.1/#length-window", 
            "text": "A sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window StockEventWindow (symbol string, price float, volume int) length(10) output all events;\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n@info(name = 'query1')\n\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will process last 10 events in a sliding manner.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/5.1.1/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds and process a number of events as specified in the window.length.  Syntax  lengthBatch( INT  window.length)\nlengthBatch( INT  window.length,  BOOL  stream.current.event)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n     \n     \n         stream.current.event \n         Let the window stream the current events out as and when they arrive to the window while expiring them in batches. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10)\nselect symbol, sum(price) as price \ninsert into OutputStream;  This collect and process 10 events as a batch and output them.  EXAMPLE 2  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;  This window sends the arriving events directly to the output letting the  sumPrice  to increase gradually, after every 10 events it clears the window as a batch and resets the  sumPrice  to zero.  EXAMPLE 3  define stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;  This uses an defined window to process 10 events  as a batch and output all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/5.1.1/#lossyfrequent-window", 
            "text": "Deprecated  This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold)\nlossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound)\nlossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         support.threshold /10 \n         DOUBLE \n         Yes \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/5.1.1/#session-window", 
            "text": "This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. There can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.  Syntax  session( INT|LONG|TIME  window.session)\nsession( INT|LONG|TIME  window.session,  STRING  window.key)\nsession( INT|LONG|TIME  window.session,  STRING  window.key,  INT|LONG|TIME  window.allowed.latency)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.session \n         The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.key \n         The grouping attribute for events. \n         default-key \n         STRING \n         Yes \n         Yes \n     \n     \n         window.allowed.latency \n         This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;  This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.", 
            "title": "session (Window)"
        }, 
        {
            "location": "/api/5.1.1/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute)\nsort( INT  window.length,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute,  STRING  order,  STRING  ...)\nsort( INT  window.length,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute,  STRING  order,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING DOUBLE INT LONG FLOAT LONG \n         No \n         Yes \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/5.1.1/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/5.1.1/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch.  Syntax  timeBatch( INT|LONG|TIME  window.time)\ntimeBatch( INT|LONG|TIME  window.time,  INT|LONG  start.time)\ntimeBatch( INT|LONG|TIME  window.time,  BOOL  stream.current.event)\ntimeBatch( INT|LONG|TIME  window.time,  INT|LONG  start.time,  BOOL  stream.current.event)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period in which the window process the events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT LONG \n         Yes \n         No \n     \n     \n         stream.current.event \n         Let the window stream the current events out as and when they arrive to the window while expiring them in batches. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec)\nselect symbol, sum(price) as price \ninsert into OutputStream;  This collect and process incoming events as a batch every 20 seconds and output them.  EXAMPLE 2  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;  This window sends the arriving events directly to the output letting the  sumPrice  to increase gradually and on every 20 second interval it clears the window as a batch resetting the  sumPrice  to zero.  EXAMPLE 3  define stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;  This uses an defined window to process events arrived every 20 seconds as a batch and output all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/5.1.1/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/5.1.1/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/5.1.1/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/5.1.1/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/5.1.1/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/5.1.1/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/5.1.1/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/5.1.1/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/5.1.1/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/5.1.1/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/5.1.0/", 
            "text": "API Docs - v5.1.0\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\nSyntax\n\n\nLONG\n count()\n\nLONG\n count(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one parameter. It can belong to any one of the available types.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nThis returns the count of distinct occurrences for a given arg.\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe object for which the number of distinct occurences needs to be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns '3' when the available values are as follows.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\nThe three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg, \nINT|LONG|DOUBLE|FLOAT\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg, \nINT|LONG|DOUBLE|FLOAT\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho)\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\nSyntax\n\n\nlog()\nlog(\nSTRING\n log.message)\nlog(\nBOOL\n is.event.logged)\nlog(\nSTRING\n log.message, \nBOOL\n is.event.logged)\nlog(\nSTRING\n priority, \nSTRING\n log.message)\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n :\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log()\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 6\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks.\n\n\nSyntax\n\n\nbatch()\nbatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of a chunk\n\n        \nIf length value was not given it assign 0 as length and process the whole batch as once\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression.\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that resets the window.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#cron('*/5 * * * * ?')\nselect symbol, sum(price) as totalPrice \ninsert into OutputStream;\n\n\n\n\nThis let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StockEventStream (symbol string, price float, volume int)\ndefine window StockEventWindow (symbol string, price float, volume int) cron('*/5 * * * * ?');\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow \nselect symbol, sum(price) as totalPrice\ninsert into OutputStream ;\n\n\n\n\nThe defined window will let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.\n\n\n\ndelay \n(Window)\n\n\nA delay window holds events for a specific time period that is regarded as a delay period before processing them.\n\n\nSyntax\n\n\ndelay(\nINT|LONG|TIME\n window.delay)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.delay\n\n        \nThe time period (specified in sec, min, ms) for which  the window should delay the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;\n\n\n\n\nIn this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time)\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout, \nBOOL\n replace.with.batchtime)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nreplace.with.batchtime\n\n        \nThis indicates to replace the expired event timeStamp as the batch end timeStamp\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nDeprecated\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count)\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry.\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window StockEventWindow (symbol string, price float, volume int) length(10) output all events;\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n@info(name = 'query1')\n\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will process last 10 events in a sliding manner.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds and process a number of events as specified in the window.length.\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\nlengthBatch(\nINT\n window.length, \nBOOL\n stream.current.event)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstream.current.event\n\n        \nLet the window stream the current events out as and when they arrive to the window while expiring them in batches.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10)\nselect symbol, sum(price) as price \ninsert into OutputStream;\n\n\n\n\nThis collect and process 10 events as a batch and output them.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;\n\n\n\n\nThis window sends the arriving events directly to the output letting the \nsumPrice\n to increase gradually, after every 10 events it clears the window as a batch and resets the \nsumPrice\n to zero.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;\n\n\n\n\nThis uses an defined window to process 10 events  as a batch and output all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nDeprecated\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold)\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound)\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \nsupport.threshold\n/10\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsession \n(Window)\n\n\nThis is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key.\nThere can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.\n\n\nSyntax\n\n\nsession(\nINT|LONG|TIME\n window.session)\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key)\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key, \nINT|LONG|TIME\n window.allowed.latency)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.session\n\n        \nThe time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.key\n\n        \nThe grouping attribute for events.\n\n        \ndefault-key\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nwindow.allowed.latency\n\n        \nThis specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter).\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;\n\n\n\n\nThis query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute)\nsort(\nINT\n window.length, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute, \nSTRING\n order, \nSTRING\n ...)\nsort(\nINT\n window.length, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute, \nSTRING\n order, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\nDOUBLE\nINT\nLONG\nFLOAT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch.\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time)\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT|LONG\n start.time)\ntimeBatch(\nINT|LONG|TIME\n window.time, \nBOOL\n stream.current.event)\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT|LONG\n start.time, \nBOOL\n stream.current.event)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period in which the window process the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nstream.current.event\n\n        \nLet the window stream the current events out as and when they arrive to the window while expiring them in batches.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec)\nselect symbol, sum(price) as price \ninsert into OutputStream;\n\n\n\n\nThis collect and process incoming events as a batch every 20 seconds and output them.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;\n\n\n\n\nThis window sends the arriving events directly to the output letting the \nsumPrice\n to increase gradually and on every 20 second interval it clears the window as a batch resetting the \nsumPrice\n to zero.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;\n\n\n\n\nThis uses an defined window to process events arrived every 20 seconds as a batch and output all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "5.1.0"
        }, 
        {
            "location": "/api/5.1.0/#api-docs-v510", 
            "text": "", 
            "title": "API Docs - v5.1.0"
        }, 
        {
            "location": "/api/5.1.0/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/5.1.0/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         Yes \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.0/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.0/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count() LONG  count( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one parameter. It can belong to any one of the available types. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         Yes \n         Yes \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.0/#distinctcount-aggregate-function", 
            "text": "This returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The object for which the number of distinct occurences needs to be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.0/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.0/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.0/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.0/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.0/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         Yes \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.0/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.0/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.0/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/5.1.0/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/5.1.0/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/5.1.0/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/5.1.0/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         Yes \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/5.1.0/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         Yes \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/5.1.0/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/5.1.0/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/5.1.0/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/5.1.0/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         Yes \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/5.1.0/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/5.1.0/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/5.1.0/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/5.1.0/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/5.1.0/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/5.1.0/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/5.1.0/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg,  INT|LONG|DOUBLE|FLOAT  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/5.1.0/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg,  INT|LONG|DOUBLE|FLOAT  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/5.1.0/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/5.1.0/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x   y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho)\npol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         Yes \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         Yes \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         Yes \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/5.1.0/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log()\nlog( STRING  log.message)\nlog( BOOL  is.event.logged)\nlog( STRING  log.message,  BOOL  is.event.logged)\nlog( STRING  priority,  STRING  log.message)\nlog( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n          : \n         STRING \n         Yes \n         Yes \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log()\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 6  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/5.1.0/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks.  Syntax  batch()\nbatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The length of a chunk \n         If length value was not given it assign 0 as length and process the whole batch as once \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/5.1.0/#cron-window", 
            "text": "This window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that resets the window. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#cron('*/5 * * * * ?')\nselect symbol, sum(price) as totalPrice \ninsert into OutputStream;  This let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.  EXAMPLE 2  define stream StockEventStream (symbol string, price float, volume int)\ndefine window StockEventWindow (symbol string, price float, volume int) cron('*/5 * * * * ?');\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow \nselect symbol, sum(price) as totalPrice\ninsert into OutputStream ;  The defined window will let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/5.1.0/#delay-window", 
            "text": "A delay window holds events for a specific time period that is regarded as a delay period before processing them.  Syntax  delay( INT|LONG|TIME  window.delay)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.delay \n         The time period (specified in sec, min, ms) for which  the window should delay the events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;  In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.", 
            "title": "delay (Window)"
        }, 
        {
            "location": "/api/5.1.0/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         Yes \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/5.1.0/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time)\nexternalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time)\nexternalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)\nexternalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout,  BOOL  replace.with.batchtime)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         Yes \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         Yes \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         replace.with.batchtime \n         This indicates to replace the expired event timeStamp as the batch end timeStamp \n         System waits till an event from next batch arrives to flush current batch \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/5.1.0/#frequent-window", 
            "text": "Deprecated  This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count)\nfrequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/5.1.0/#length-window", 
            "text": "A sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window StockEventWindow (symbol string, price float, volume int) length(10) output all events;\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n@info(name = 'query1')\n\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will process last 10 events in a sliding manner.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/5.1.0/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds and process a number of events as specified in the window.length.  Syntax  lengthBatch( INT  window.length)\nlengthBatch( INT  window.length,  BOOL  stream.current.event)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n     \n     \n         stream.current.event \n         Let the window stream the current events out as and when they arrive to the window while expiring them in batches. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10)\nselect symbol, sum(price) as price \ninsert into OutputStream;  This collect and process 10 events as a batch and output them.  EXAMPLE 2  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;  This window sends the arriving events directly to the output letting the  sumPrice  to increase gradually, after every 10 events it clears the window as a batch and resets the  sumPrice  to zero.  EXAMPLE 3  define stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;  This uses an defined window to process 10 events  as a batch and output all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/5.1.0/#lossyfrequent-window", 
            "text": "Deprecated  This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold)\nlossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound)\nlossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         support.threshold /10 \n         DOUBLE \n         Yes \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/5.1.0/#session-window", 
            "text": "This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. There can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.  Syntax  session( INT|LONG|TIME  window.session)\nsession( INT|LONG|TIME  window.session,  STRING  window.key)\nsession( INT|LONG|TIME  window.session,  STRING  window.key,  INT|LONG|TIME  window.allowed.latency)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.session \n         The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.key \n         The grouping attribute for events. \n         default-key \n         STRING \n         Yes \n         Yes \n     \n     \n         window.allowed.latency \n         This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;  This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.", 
            "title": "session (Window)"
        }, 
        {
            "location": "/api/5.1.0/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute)\nsort( INT  window.length,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute,  STRING  order,  STRING  ...)\nsort( INT  window.length,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute,  STRING  order,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING DOUBLE INT LONG FLOAT LONG \n         No \n         Yes \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/5.1.0/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/5.1.0/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch.  Syntax  timeBatch( INT|LONG|TIME  window.time)\ntimeBatch( INT|LONG|TIME  window.time,  INT|LONG  start.time)\ntimeBatch( INT|LONG|TIME  window.time,  BOOL  stream.current.event)\ntimeBatch( INT|LONG|TIME  window.time,  INT|LONG  start.time,  BOOL  stream.current.event)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period in which the window process the events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT LONG \n         Yes \n         No \n     \n     \n         stream.current.event \n         Let the window stream the current events out as and when they arrive to the window while expiring them in batches. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec)\nselect symbol, sum(price) as price \ninsert into OutputStream;  This collect and process incoming events as a batch every 20 seconds and output them.  EXAMPLE 2  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;  This window sends the arriving events directly to the output letting the  sumPrice  to increase gradually and on every 20 second interval it clears the window as a batch resetting the  sumPrice  to zero.  EXAMPLE 3  define stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;  This uses an defined window to process events arrived every 20 seconds as a batch and output all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/5.1.0/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/5.1.0/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/5.1.0/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/5.1.0/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/5.1.0/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/5.1.0/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/5.1.0/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/5.1.0/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/5.1.0/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/5.1.0/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/5.0.2/", 
            "text": "API Docs - v5.0.2\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\nSyntax\n\n\nLONG\n count()\n\nLONG\n count(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one parameter. It can belong to any one of the available types.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nThis returns the count of distinct occurrences for a given arg.\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe object for which the number of distinct occurences needs to be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns '3' when the available values are as follows.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\nThe three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg, \nINT|LONG|DOUBLE|FLOAT\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg, \nINT|LONG|DOUBLE|FLOAT\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho)\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\nSyntax\n\n\nlog()\nlog(\nSTRING\n log.message)\nlog(\nBOOL\n is.event.logged)\nlog(\nSTRING\n log.message, \nBOOL\n is.event.logged)\nlog(\nSTRING\n priority, \nSTRING\n log.message)\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n :\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log()\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 6\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks.\n\n\nSyntax\n\n\nbatch()\nbatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of a chunk\n\n        \nIf length value was not given it assign 0 as length and process the whole batch as once\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression.\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that resets the window.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#cron('*/5 * * * * ?')\nselect symbol, sum(price) as totalPrice \ninsert into OutputStream;\n\n\n\n\nThis let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StockEventStream (symbol string, price float, volume int)\ndefine window StockEventWindow (symbol string, price float, volume int) cron('*/5 * * * * ?');\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow \nselect symbol, sum(price) as totalPrice\ninsert into OutputStream ;\n\n\n\n\nThe defined window will let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.\n\n\n\ndelay \n(Window)\n\n\nA delay window holds events for a specific time period that is regarded as a delay period before processing them.\n\n\nSyntax\n\n\ndelay(\nINT|LONG|TIME\n window.delay)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.delay\n\n        \nThe time period (specified in sec, min, ms) for which  the window should delay the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;\n\n\n\n\nIn this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time)\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout, \nBOOL\n replace.with.batchtime)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nreplace.with.batchtime\n\n        \nThis indicates to replace the expired event timeStamp as the batch end timeStamp\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nDeprecated\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count)\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry.\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window StockEventWindow (symbol string, price float, volume int) length(10) output all events;\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n@info(name = 'query1')\n\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will process last 10 events in a sliding manner.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds and process a number of events as specified in the window.length.\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\nlengthBatch(\nINT\n window.length, \nBOOL\n stream.current.event)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstream.current.event\n\n        \nLet the window stream the current events out as and when they arrive to the window while expiring them in batches.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10)\nselect symbol, sum(price) as price \ninsert into OutputStream;\n\n\n\n\nThis collect and process 10 events as a batch and output them.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;\n\n\n\n\nThis window sends the arriving events directly to the output letting the \nsumPrice\n to increase gradually, after every 10 events it clears the window as a batch and resets the \nsumPrice\n to zero.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;\n\n\n\n\nThis uses an defined window to process 10 events  as a batch and output all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nDeprecated\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold)\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound)\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \nsupport.threshold\n/10\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsession \n(Window)\n\n\nThis is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key.\nThere can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.\n\n\nSyntax\n\n\nsession(\nINT|LONG|TIME\n window.session)\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key)\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key, \nINT|LONG|TIME\n window.allowed.latency)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.session\n\n        \nThe time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.key\n\n        \nThe grouping attribute for events.\n\n        \ndefault-key\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nwindow.allowed.latency\n\n        \nThis specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter).\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;\n\n\n\n\nThis query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute)\nsort(\nINT\n window.length, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute, \nSTRING\n order, \nSTRING\n ...)\nsort(\nINT\n window.length, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute, \nSTRING\n order, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\nDOUBLE\nINT\nLONG\nFLOAT\nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch.\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time)\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT|LONG\n start.time)\ntimeBatch(\nINT|LONG|TIME\n window.time, \nBOOL\n stream.current.event)\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT|LONG\n start.time, \nBOOL\n stream.current.event)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period in which the window process the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nstream.current.event\n\n        \nLet the window stream the current events out as and when they arrive to the window while expiring them in batches.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec)\nselect symbol, sum(price) as price \ninsert into OutputStream;\n\n\n\n\nThis collect and process incoming events as a batch every 20 seconds and output them.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;\n\n\n\n\nThis window sends the arriving events directly to the output letting the \nsumPrice\n to increase gradually and on every 20 second interval it clears the window as a batch resetting the \nsumPrice\n to zero.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;\n\n\n\n\nThis uses an defined window to process events arrived every 20 seconds as a batch and output all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "5.0.2"
        }, 
        {
            "location": "/api/5.0.2/#api-docs-v502", 
            "text": "", 
            "title": "API Docs - v5.0.2"
        }, 
        {
            "location": "/api/5.0.2/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/5.0.2/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         Yes \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.2/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.2/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count() LONG  count( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one parameter. It can belong to any one of the available types. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         Yes \n         Yes \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.2/#distinctcount-aggregate-function", 
            "text": "This returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The object for which the number of distinct occurences needs to be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.2/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.2/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.2/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.2/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.2/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         Yes \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.2/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.2/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.2/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.2/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/5.0.2/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/5.0.2/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/5.0.2/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         Yes \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/5.0.2/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         Yes \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/5.0.2/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/5.0.2/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/5.0.2/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/5.0.2/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         Yes \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/5.0.2/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/5.0.2/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/5.0.2/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/5.0.2/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/5.0.2/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/5.0.2/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/5.0.2/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg,  INT|LONG|DOUBLE|FLOAT  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/5.0.2/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg,  INT|LONG|DOUBLE|FLOAT  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/5.0.2/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/5.0.2/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x   y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho)\npol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         Yes \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         Yes \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         Yes \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/5.0.2/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log()\nlog( STRING  log.message)\nlog( BOOL  is.event.logged)\nlog( STRING  log.message,  BOOL  is.event.logged)\nlog( STRING  priority,  STRING  log.message)\nlog( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n          : \n         STRING \n         Yes \n         Yes \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log()\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 6  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/5.0.2/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks.  Syntax  batch()\nbatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The length of a chunk \n         If length value was not given it assign 0 as length and process the whole batch as once \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/5.0.2/#cron-window", 
            "text": "This window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that resets the window. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#cron('*/5 * * * * ?')\nselect symbol, sum(price) as totalPrice \ninsert into OutputStream;  This let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.  EXAMPLE 2  define stream StockEventStream (symbol string, price float, volume int)\ndefine window StockEventWindow (symbol string, price float, volume int) cron('*/5 * * * * ?');\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow \nselect symbol, sum(price) as totalPrice\ninsert into OutputStream ;  The defined window will let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/5.0.2/#delay-window", 
            "text": "A delay window holds events for a specific time period that is regarded as a delay period before processing them.  Syntax  delay( INT|LONG|TIME  window.delay)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.delay \n         The time period (specified in sec, min, ms) for which  the window should delay the events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;  In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.", 
            "title": "delay (Window)"
        }, 
        {
            "location": "/api/5.0.2/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         Yes \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/5.0.2/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time)\nexternalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time)\nexternalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)\nexternalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout,  BOOL  replace.with.batchtime)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         Yes \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         Yes \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         replace.with.batchtime \n         This indicates to replace the expired event timeStamp as the batch end timeStamp \n         System waits till an event from next batch arrives to flush current batch \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/5.0.2/#frequent-window", 
            "text": "Deprecated  This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count)\nfrequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/5.0.2/#length-window", 
            "text": "A sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window StockEventWindow (symbol string, price float, volume int) length(10) output all events;\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n@info(name = 'query1')\n\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will process last 10 events in a sliding manner.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/5.0.2/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds and process a number of events as specified in the window.length.  Syntax  lengthBatch( INT  window.length)\nlengthBatch( INT  window.length,  BOOL  stream.current.event)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n     \n     \n         stream.current.event \n         Let the window stream the current events out as and when they arrive to the window while expiring them in batches. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10)\nselect symbol, sum(price) as price \ninsert into OutputStream;  This collect and process 10 events as a batch and output them.  EXAMPLE 2  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;  This window sends the arriving events directly to the output letting the  sumPrice  to increase gradually, after every 10 events it clears the window as a batch and resets the  sumPrice  to zero.  EXAMPLE 3  define stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;  This uses an defined window to process 10 events  as a batch and output all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/5.0.2/#lossyfrequent-window", 
            "text": "Deprecated  This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold)\nlossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound)\nlossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         support.threshold /10 \n         DOUBLE \n         Yes \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/5.0.2/#session-window", 
            "text": "This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. There can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.  Syntax  session( INT|LONG|TIME  window.session)\nsession( INT|LONG|TIME  window.session,  STRING  window.key)\nsession( INT|LONG|TIME  window.session,  STRING  window.key,  INT|LONG|TIME  window.allowed.latency)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.session \n         The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.key \n         The grouping attribute for events. \n         default-key \n         STRING \n         Yes \n         Yes \n     \n     \n         window.allowed.latency \n         This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;  This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.", 
            "title": "session (Window)"
        }, 
        {
            "location": "/api/5.0.2/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute)\nsort( INT  window.length,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute,  STRING  order,  STRING  ...)\nsort( INT  window.length,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute,  STRING  order,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING DOUBLE INT LONG FLOAT LONG \n         No \n         Yes \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/5.0.2/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/5.0.2/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch.  Syntax  timeBatch( INT|LONG|TIME  window.time)\ntimeBatch( INT|LONG|TIME  window.time,  INT|LONG  start.time)\ntimeBatch( INT|LONG|TIME  window.time,  BOOL  stream.current.event)\ntimeBatch( INT|LONG|TIME  window.time,  INT|LONG  start.time,  BOOL  stream.current.event)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period in which the window process the events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT LONG \n         Yes \n         No \n     \n     \n         stream.current.event \n         Let the window stream the current events out as and when they arrive to the window while expiring them in batches. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec)\nselect symbol, sum(price) as price \ninsert into OutputStream;  This collect and process incoming events as a batch every 20 seconds and output them.  EXAMPLE 2  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;  This window sends the arriving events directly to the output letting the  sumPrice  to increase gradually and on every 20 second interval it clears the window as a batch resetting the  sumPrice  to zero.  EXAMPLE 3  define stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;  This uses an defined window to process events arrived every 20 seconds as a batch and output all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/5.0.2/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/5.0.2/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/5.0.2/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/5.0.2/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/5.0.2/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/5.0.2/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/5.0.2/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/5.0.2/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/5.0.2/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/5.0.2/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/5.0.1/", 
            "text": "API Docs - v5.0.1\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\nLONG\n count(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one parameter. It can belong to any one of the available types.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nThis returns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe object for which the number of distinct occurences needs to be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns '3' when the available values are as follows.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\nThe three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg, \nINT|LONG|DOUBLE|FLOAT\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg, \nINT|LONG|DOUBLE|FLOAT\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart()\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho)\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\n\nSyntax\n\n\nlog()\nlog(\nSTRING\n log.message)\nlog(\nBOOL\n is.event.logged)\nlog(\nSTRING\n log.message, \nBOOL\n is.event.logged)\nlog(\nSTRING\n priority, \nSTRING\n log.message)\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n :\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log()\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 6\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks.\n\n\n\nSyntax\n\n\nbatch()\nbatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of a chunk\n\n        \nIf length value was not given it assign 0 as length and process the whole batch as once\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that resets the window.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#cron('*/5 * * * * ?')\nselect symbol, sum(price) as totalPrice \ninsert into OutputStream;\n\n\n\n\nThis let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StockEventStream (symbol string, price float, volume int)\ndefine window StockEventWindow (symbol string, price float, volume int) cron('*/5 * * * * ?');\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow \nselect symbol, sum(price) as totalPrice\ninsert into OutputStream ;\n\n\n\n\nThe defined window will let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.\n\n\n\ndelay \n(Window)\n\n\nA delay window holds events for a specific time period that is regarded as a delay period before processing them.\n\n\n\nSyntax\n\n\ndelay(\nINT|LONG|TIME\n window.delay)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.delay\n\n        \nThe time period (specified in sec, min, ms) for which  the window should delay the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;\n\n\n\n\nIn this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time)\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout, \nBOOL\n replace.with.batchtime)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nYes\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nreplace.with.batchtime\n\n        \nThis indicates to replace the expired event timeStamp as the batch end timeStamp\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count)\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window StockEventWindow (symbol string, price float, volume int) length(10) output all events;\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n@info(name = 'query1')\n\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will process last 10 events in a sliding manner.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds and process a number of events as specified in the window.length.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\nlengthBatch(\nINT\n window.length, \nBOOL\n stream.current.event)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstream.current.event\n\n        \nLet the window stream the current events out as and when they arrive to the window while expiring them in batches.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10)\nselect symbol, sum(price) as price \ninsert into OutputStream;\n\n\n\n\nThis collect and process 10 events as a batch and output them.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;\n\n\n\n\nThis window sends the arriving events directly to the output letting the \nsumPrice\n to increase gradually, after every 10 events it clears the window as a batch and resets the \nsumPrice\n to zero.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;\n\n\n\n\nThis uses an defined window to process 10 events  as a batch and output all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold)\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound)\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsession \n(Window)\n\n\nThis is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key.\nThere can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.\n\n\n\nSyntax\n\n\nsession(\nINT|LONG|TIME\n window.session)\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key)\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key, \nINT|LONG|TIME\n window.allowed.latency)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.session\n\n        \nThe time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.key\n\n        \nThe grouping attribute for events.\n\n        \ndefault-key\n\n        \nSTRING\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \nwindow.allowed.latency\n\n        \nThis specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter).\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;\n\n\n\n\nThis query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute)\nsort(\nINT\n window.length, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute, \nSTRING\n order, \nSTRING\n ...)\nsort(\nINT\n window.length, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute, \nSTRING\n order, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n attribute, \nSTRING|DOUBLE|INT|LONG|FLOAT|LONG\n ...)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\nDOUBLE\nINT\nLONG\nFLOAT\nLONG\n\n        \nYes\n\n        \nYes\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time)\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT|LONG\n start.time)\ntimeBatch(\nINT|LONG|TIME\n window.time, \nBOOL\n stream.current.event)\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT|LONG\n start.time, \nBOOL\n stream.current.event)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period in which the window process the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nstream.current.event\n\n        \nLet the window stream the current events out as and when they arrive to the window while expiring them in batches.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec)\nselect symbol, sum(price) as price \ninsert into OutputStream;\n\n\n\n\nThis collect and process incoming events as a batch every 20 seconds and output them.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;\n\n\n\n\nThis window sends the arriving events directly to the output letting the \nsumPrice\n to increase gradually and on every 20 second interval it clears the window as a batch resetting the \nsumPrice\n to zero.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;\n\n\n\n\nThis uses an defined window to process events arrived every 20 seconds as a batch and output all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "5.0.1"
        }, 
        {
            "location": "/api/5.0.1/#api-docs-v501", 
            "text": "", 
            "title": "API Docs - v5.0.1"
        }, 
        {
            "location": "/api/5.0.1/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/5.0.1/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         Yes \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.1/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.1/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count() LONG  count( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one parameter. It can belong to any one of the available types. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         Yes \n         Yes \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.1/#distinctcount-aggregate-function", 
            "text": "This returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The object for which the number of distinct occurences needs to be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.1/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.1/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.1/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.1/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.1/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         Yes \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.1/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.1/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.1/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.1/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/5.0.1/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/5.0.1/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/5.0.1/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         Yes \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/5.0.1/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         Yes \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/5.0.1/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/5.0.1/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/5.0.1/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/5.0.1/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         Yes \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/5.0.1/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/5.0.1/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/5.0.1/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/5.0.1/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/5.0.1/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/5.0.1/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/5.0.1/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg,  INT|LONG|DOUBLE|FLOAT  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/5.0.1/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg,  INT|LONG|DOUBLE|FLOAT  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/5.0.1/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         Yes \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/5.0.1/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart()\npol2Cart( DOUBLE  theta,  DOUBLE  rho)\npol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         Yes \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         Yes \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         Yes \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/5.0.1/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log()\nlog( STRING  log.message)\nlog( BOOL  is.event.logged)\nlog( STRING  log.message,  BOOL  is.event.logged)\nlog( STRING  priority,  STRING  log.message)\nlog( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n          : \n         STRING \n         Yes \n         Yes \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log()\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 6  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/5.0.1/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks.  Syntax  batch()\nbatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The length of a chunk \n         If length value was not given it assign 0 as length and process the whole batch as once \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/5.0.1/#cron-window", 
            "text": "This window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that resets the window. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#cron('*/5 * * * * ?')\nselect symbol, sum(price) as totalPrice \ninsert into OutputStream;  This let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.  EXAMPLE 2  define stream StockEventStream (symbol string, price float, volume int)\ndefine window StockEventWindow (symbol string, price float, volume int) cron('*/5 * * * * ?');\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow \nselect symbol, sum(price) as totalPrice\ninsert into OutputStream ;  The defined window will let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/5.0.1/#delay-window", 
            "text": "A delay window holds events for a specific time period that is regarded as a delay period before processing them.  Syntax  delay( INT|LONG|TIME  window.delay)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.delay \n         The time period (specified in sec, min, ms) for which  the window should delay the events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;  In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.", 
            "title": "delay (Window)"
        }, 
        {
            "location": "/api/5.0.1/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         Yes \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/5.0.1/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time)\nexternalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time)\nexternalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)\nexternalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout,  BOOL  replace.with.batchtime)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         Yes \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         Yes \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         replace.with.batchtime \n         This indicates to replace the expired event timeStamp as the batch end timeStamp \n         System waits till an event from next batch arrives to flush current batch \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/5.0.1/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count)\nfrequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/5.0.1/#length-window", 
            "text": "A sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window StockEventWindow (symbol string, price float, volume int) length(10) output all events;\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n@info(name = 'query1')\n\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will process last 10 events in a sliding manner.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/5.0.1/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds and process a number of events as specified in the window.length.  Syntax  lengthBatch( INT  window.length)\nlengthBatch( INT  window.length,  BOOL  stream.current.event)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n     \n     \n         stream.current.event \n         Let the window stream the current events out as and when they arrive to the window while expiring them in batches. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10)\nselect symbol, sum(price) as price \ninsert into OutputStream;  This collect and process 10 events as a batch and output them.  EXAMPLE 2  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;  This window sends the arriving events directly to the output letting the  sumPrice  to increase gradually, after every 10 events it clears the window as a batch and resets the  sumPrice  to zero.  EXAMPLE 3  define stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;  This uses an defined window to process 10 events  as a batch and output all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/5.0.1/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold)\nlossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound)\nlossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         Yes \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/5.0.1/#session-window", 
            "text": "This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. There can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.  Syntax  session( INT|LONG|TIME  window.session)\nsession( INT|LONG|TIME  window.session,  STRING  window.key)\nsession( INT|LONG|TIME  window.session,  STRING  window.key,  INT|LONG|TIME  window.allowed.latency)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.session \n         The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.key \n         The grouping attribute for events. \n         default-key \n         STRING \n         Yes \n         Yes \n     \n     \n         window.allowed.latency \n         This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;  This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.", 
            "title": "session (Window)"
        }, 
        {
            "location": "/api/5.0.1/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute)\nsort( INT  window.length,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute,  STRING  order,  STRING  ...)\nsort( INT  window.length,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute,  STRING  order,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  attribute,  STRING|DOUBLE|INT|LONG|FLOAT|LONG  ...)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING DOUBLE INT LONG FLOAT LONG \n         Yes \n         Yes \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/5.0.1/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/5.0.1/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch.  Syntax  timeBatch( INT|LONG|TIME  window.time)\ntimeBatch( INT|LONG|TIME  window.time,  INT|LONG  start.time)\ntimeBatch( INT|LONG|TIME  window.time,  BOOL  stream.current.event)\ntimeBatch( INT|LONG|TIME  window.time,  INT|LONG  start.time,  BOOL  stream.current.event)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period in which the window process the events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT LONG \n         Yes \n         No \n     \n     \n         stream.current.event \n         Let the window stream the current events out as and when they arrive to the window while expiring them in batches. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec)\nselect symbol, sum(price) as price \ninsert into OutputStream;  This collect and process incoming events as a batch every 20 seconds and output them.  EXAMPLE 2  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;  This window sends the arriving events directly to the output letting the  sumPrice  to increase gradually and on every 20 second interval it clears the window as a batch resetting the  sumPrice  to zero.  EXAMPLE 3  define stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;  This uses an defined window to process events arrived every 20 seconds as a batch and output all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/5.0.1/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/5.0.1/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/5.0.1/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/5.0.1/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/5.0.1/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/5.0.1/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/5.0.1/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/5.0.1/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/5.0.1/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/5.0.1/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/5.0.0/", 
            "text": "API Docs - v5.0.0\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nThis returns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe object for which the number of distinct occurences needs to be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns '3' when the available values are as follows.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\nThe three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks.\n\n\n\nSyntax\n\n\nbatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe length of a chunk\n\n        \nIf length value was not given it assign 0 as length and process the whole batch as once\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that resets the window.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#cron('*/5 * * * * ?')\nselect symbol, sum(price) as totalPrice \ninsert into OutputStream;\n\n\n\n\nThis let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.\n\n\n\nEXAMPLE 2\n\n\ndefine stream StockEventStream (symbol string, price float, volume int)\ndefine window StockEventWindow (symbol string, price float, volume int) cron('*/5 * * * * ?');\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow \nselect symbol, sum(price) as totalPrice\ninsert into OutputStream ;\n\n\n\n\nThe defined window will let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.\n\n\n\ndelay \n(Window)\n\n\nA delay window holds events for a specific time period that is regarded as a delay period before processing them.\n\n\n\nSyntax\n\n\ndelay(\nINT|LONG|TIME\n window.delay)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.delay\n\n        \nThe time period (specified in sec, min, ms) for which  the window should delay the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;\n\n\n\n\nIn this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window StockEventWindow (symbol string, price float, volume int) length(10) output all events;\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n@info(name = 'query1')\n\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will process last 10 events in a sliding manner.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds and process a number of events as specified in the window.length.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length, \nBOOL\n stream.current.event)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstream.current.event\n\n        \nLet the window stream the current events out as and when they arrive to the window while expiring them in batches.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10)\nselect symbol, sum(price) as price \ninsert into OutputStream;\n\n\n\n\nThis collect and process 10 events as a batch and output them.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;\n\n\n\n\nThis window sends the arriving events directly to the output letting the \nsumPrice\n to increase gradually, after every 10 events it clears the window as a batch and resets the \nsumPrice\n to zero.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;\n\n\n\n\nThis uses an defined window to process 10 events  as a batch and output all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsession \n(Window)\n\n\nThis is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key.\nThere can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.\n\n\n\nSyntax\n\n\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key, \nINT|LONG|TIME\n window.allowedlatency)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.session\n\n        \nThe time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.key\n\n        \nThe grouping attribute for events.\n\n        \ndefault-key\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.allowedlatency\n\n        \nThis specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter).\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;\n\n\n\n\nThis query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time, \nBOOL\n stream.current.event)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period in which the window process the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nstream.current.event\n\n        \nLet the window stream the current events out as and when they arrive to the window while expiring them in batches.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec)\nselect symbol, sum(price) as price \ninsert into OutputStream;\n\n\n\n\nThis collect and process incoming events as a batch every 20 seconds and output them.\n\n\n\nEXAMPLE 2\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;\n\n\n\n\nThis window sends the arriving events directly to the output letting the \nsumPrice\n to increase gradually and on every 20 second interval it clears the window as a batch resetting the \nsumPrice\n to zero.\n\n\n\nEXAMPLE 3\n\n\ndefine stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;\n\n\n\n\nThis uses an defined window to process events arrived every 20 seconds as a batch and output all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "5.0.0"
        }, 
        {
            "location": "/api/5.0.0/#api-docs-v500", 
            "text": "", 
            "title": "API Docs - v5.0.0"
        }, 
        {
            "location": "/api/5.0.0/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/5.0.0/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.0/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.0/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.0/#distinctcount-aggregate-function", 
            "text": "This returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The object for which the number of distinct occurences needs to be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.0/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.0/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.0/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.0/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.0/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.0/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.0/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.0/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/5.0.0/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/5.0.0/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/5.0.0/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/5.0.0/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/5.0.0/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/5.0.0/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/5.0.0/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/5.0.0/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/5.0.0/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/5.0.0/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/5.0.0/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/5.0.0/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/5.0.0/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/5.0.0/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/5.0.0/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/5.0.0/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/5.0.0/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/5.0.0/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/5.0.0/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/5.0.0/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/5.0.0/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches. If it has the parameter length specified, then batch window process the batch as several chunks.  Syntax  batch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The length of a chunk \n         If length value was not given it assign 0 as length and process the whole batch as once \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/5.0.0/#cron-window", 
            "text": "This window outputs the arriving events as and when they arrive, and resets (expires) the window periodically based on the given cron expression.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that resets the window. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#cron('*/5 * * * * ?')\nselect symbol, sum(price) as totalPrice \ninsert into OutputStream;  This let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.  EXAMPLE 2  define stream StockEventStream (symbol string, price float, volume int)\ndefine window StockEventWindow (symbol string, price float, volume int) cron('*/5 * * * * ?');\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow \nselect symbol, sum(price) as totalPrice\ninsert into OutputStream ;  The defined window will let the totalPrice to gradually increase and resets to zero as a batch every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/5.0.0/#delay-window", 
            "text": "A delay window holds events for a specific time period that is regarded as a delay period before processing them.  Syntax  delay( INT|LONG|TIME  window.delay)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.delay \n         The time period (specified in sec, min, ms) for which  the window should delay the events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;  In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.", 
            "title": "delay (Window)"
        }, 
        {
            "location": "/api/5.0.0/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/5.0.0/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/5.0.0/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/5.0.0/#length-window", 
            "text": "A sliding length window that holds the last 'window.length' events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window StockEventWindow (symbol string, price float, volume int) length(10) output all events;\n\n@info(name = 'query0')\nfrom StockEventStream\ninsert into StockEventWindow;\n@info(name = 'query1')\n\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will process last 10 events in a sliding manner.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/5.0.0/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds and process a number of events as specified in the window.length.  Syntax  lengthBatch( INT  window.length,  BOOL  stream.current.event)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n     \n     \n         stream.current.event \n         Let the window stream the current events out as and when they arrive to the window while expiring them in batches. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10)\nselect symbol, sum(price) as price \ninsert into OutputStream;  This collect and process 10 events as a batch and output them.  EXAMPLE 2  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#lengthBatch(10, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;  This window sends the arriving events directly to the output letting the  sumPrice  to increase gradually, after every 10 events it clears the window as a batch and resets the  sumPrice  to zero.  EXAMPLE 3  define stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;  This uses an defined window to process 10 events  as a batch and output all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/5.0.0/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/5.0.0/#session-window", 
            "text": "This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. There can be out of order and late arrival of events, these events can arrive after the session is expired, to include those events to the matching session key specify a latency time period that is less than the session gap period.To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.  Syntax  session( INT|LONG|TIME  window.session,  STRING  window.key,  INT|LONG|TIME  window.allowedlatency)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.session \n         The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.key \n         The grouping attribute for events. \n         default-key \n         STRING \n         Yes \n         No \n     \n     \n         window.allowedlatency \n         This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;  This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.", 
            "title": "session (Window)"
        }, 
        {
            "location": "/api/5.0.0/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/5.0.0/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/5.0.0/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds and process events that arrive during 'window.time' period as a batch.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time,  BOOL  stream.current.event)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period in which the window process the events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT \n         Yes \n         No \n     \n     \n         stream.current.event \n         Let the window stream the current events out as and when they arrive to the window while expiring them in batches. \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec)\nselect symbol, sum(price) as price \ninsert into OutputStream;  This collect and process incoming events as a batch every 20 seconds and output them.  EXAMPLE 2  define stream InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\nfrom InputEventStream#timeBatch(20 sec, true)\nselect symbol, sum(price) as sumPrice \ninsert into OutputStream;  This window sends the arriving events directly to the output letting the  sumPrice  to increase gradually and on every 20 second interval it clears the window as a batch resetting the  sumPrice  to zero.  EXAMPLE 3  define stream InputEventStream (symbol string, price float, volume int);\ndefine window StockEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom InputEventStream\ninsert into StockEventWindow;\n\n@info(name = 'query1')\nfrom StockEventWindow\nselect symbol, sum(price) as price\ninsert all events into OutputStream ;  This uses an defined window to process events arrived every 20 seconds as a batch and output all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/5.0.0/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/5.0.0/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/5.0.0/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/5.0.0/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/5.0.0/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/5.0.0/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/5.0.0/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/5.0.0/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/5.0.0/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/5.0.0/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.5.11/", 
            "text": "API Docs - v4.5.11\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nThis returns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe object for which the number of distinct occurences needs to be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns '3' when the available values are as follows.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\nThe three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.\n\n\n\nSyntax\n\n\nbatch()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\ndelay \n(Window)\n\n\nA delay window holds events for a specific time period that is regarded as a delay period before processing them.\n\n\n\nSyntax\n\n\ndelay(\nINT|LONG|TIME\n window.delay)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.delay\n\n        \nThe time period (specified in sec, min, ms) for which  the window should delay the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;\n\n\n\n\nIn this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsession \n(Window)\n\n\nThis is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key.\nWhen performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period.\nTo have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.\n\n\n\nSyntax\n\n\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key, \nINT|LONG|TIME\n window.allowedlatency)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.session\n\n        \nThe time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.key\n\n        \nThe grouping attribute for events.\n\n        \ndefault-key\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.allowedlatency\n\n        \nThis specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter).\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;\n\n\n\n\nThis query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events arrived every 20 seconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "4.5.11"
        }, 
        {
            "location": "/api/4.5.11/#api-docs-v4511", 
            "text": "", 
            "title": "API Docs - v4.5.11"
        }, 
        {
            "location": "/api/4.5.11/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.5.11/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.11/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.11/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.11/#distinctcount-aggregate-function", 
            "text": "This returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The object for which the number of distinct occurences needs to be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.11/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.11/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.11/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.11/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.11/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.11/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.11/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.11/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.11/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.5.11/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.5.11/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.5.11/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.5.11/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/4.5.11/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.5.11/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.5.11/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.5.11/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.5.11/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.5.11/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.5.11/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.5.11/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.5.11/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.5.11/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.5.11/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.5.11/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.5.11/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/4.5.11/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.5.11/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.5.11/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.  Syntax  batch()  Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/4.5.11/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.5.11/#delay-window", 
            "text": "A delay window holds events for a specific time period that is regarded as a delay period before processing them.  Syntax  delay( INT|LONG|TIME  window.delay)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.delay \n         The time period (specified in sec, min, ms) for which  the window should delay the events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;  In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.", 
            "title": "delay (Window)"
        }, 
        {
            "location": "/api/4.5.11/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.5.11/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.5.11/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.5.11/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.5.11/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.5.11/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.5.11/#session-window", 
            "text": "This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. When performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period. To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.  Syntax  session( INT|LONG|TIME  window.session,  STRING  window.key,  INT|LONG|TIME  window.allowedlatency)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.session \n         The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.key \n         The grouping attribute for events. \n         default-key \n         STRING \n         Yes \n         No \n     \n     \n         window.allowedlatency \n         This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;  This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.", 
            "title": "session (Window)"
        }, 
        {
            "location": "/api/4.5.11/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.5.11/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.5.11/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 seconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.5.11/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.5.11/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.5.11/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.5.11/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/4.5.11/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.5.11/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.5.11/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.5.11/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.5.11/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.5.11/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.5.10/", 
            "text": "API Docs - v4.5.10\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nThis returns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe object for which the number of distinct occurences needs to be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns '3' when the available values are as follows.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\nThe three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.\n\n\n\nSyntax\n\n\nbatch()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\ndelay \n(Window)\n\n\nA delay window holds events for a specific time period that is regarded as a delay period before processing them.\n\n\n\nSyntax\n\n\ndelay(\nINT|LONG|TIME\n window.delay)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.delay\n\n        \nThe time period (specified in sec, min, ms) for which  the window should delay the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;\n\n\n\n\nIn this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsession \n(Window)\n\n\nThis is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key.\nWhen performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period.\nTo have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.\n\n\n\nSyntax\n\n\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key, \nINT|LONG|TIME\n window.allowedlatency)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.session\n\n        \nThe time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.key\n\n        \nThe grouping attribute for events.\n\n        \ndefault-key\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.allowedlatency\n\n        \nThis specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter).\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;\n\n\n\n\nThis query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events arrived every 20 seconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "4.5.10"
        }, 
        {
            "location": "/api/4.5.10/#api-docs-v4510", 
            "text": "", 
            "title": "API Docs - v4.5.10"
        }, 
        {
            "location": "/api/4.5.10/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.5.10/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.10/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.10/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.10/#distinctcount-aggregate-function", 
            "text": "This returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The object for which the number of distinct occurences needs to be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.10/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.10/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.10/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.10/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.10/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.10/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.10/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.10/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.10/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.5.10/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.5.10/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.5.10/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.5.10/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/4.5.10/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.5.10/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.5.10/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.5.10/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.5.10/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.5.10/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.5.10/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.5.10/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.5.10/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.5.10/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.5.10/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.5.10/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.5.10/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/4.5.10/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.5.10/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.5.10/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.  Syntax  batch()  Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/4.5.10/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.5.10/#delay-window", 
            "text": "A delay window holds events for a specific time period that is regarded as a delay period before processing them.  Syntax  delay( INT|LONG|TIME  window.delay)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.delay \n         The time period (specified in sec, min, ms) for which  the window should delay the events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;  In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.", 
            "title": "delay (Window)"
        }, 
        {
            "location": "/api/4.5.10/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.5.10/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.5.10/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.5.10/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.5.10/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.5.10/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.5.10/#session-window", 
            "text": "This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. When performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period. To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.  Syntax  session( INT|LONG|TIME  window.session,  STRING  window.key,  INT|LONG|TIME  window.allowedlatency)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.session \n         The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.key \n         The grouping attribute for events. \n         default-key \n         STRING \n         Yes \n         No \n     \n     \n         window.allowedlatency \n         This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;  This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.", 
            "title": "session (Window)"
        }, 
        {
            "location": "/api/4.5.10/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.5.10/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.5.10/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 seconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.5.10/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.5.10/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.5.10/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.5.10/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/4.5.10/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.5.10/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.5.10/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.5.10/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.5.10/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.5.10/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.5.9/", 
            "text": "API Docs - v4.5.9\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nThis returns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe object for which the number of distinct occurences needs to be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns '3' when the available values are as follows.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\nThe three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.\n\n\n\nSyntax\n\n\nbatch()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\ndelay \n(Window)\n\n\nA delay window holds events for a specific time period that is regarded as a delay period before processing them.\n\n\n\nSyntax\n\n\ndelay(\nINT|LONG|TIME\n window.delay)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.delay\n\n        \nThe time period (specified in sec, min, ms) for which  the window should delay the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;\n\n\n\n\nIn this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsession \n(Window)\n\n\nThis is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key.\nWhen performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period.\nTo have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.\n\n\n\nSyntax\n\n\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key, \nINT|LONG|TIME\n window.allowedlatency)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.session\n\n        \nThe time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.key\n\n        \nThe grouping attribute for events.\n\n        \ndefault-key\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.allowedlatency\n\n        \nThis specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter).\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;\n\n\n\n\nThis query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events arrived every 20 seconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "4.5.9"
        }, 
        {
            "location": "/api/4.5.9/#api-docs-v459", 
            "text": "", 
            "title": "API Docs - v4.5.9"
        }, 
        {
            "location": "/api/4.5.9/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.5.9/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.9/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.9/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.9/#distinctcount-aggregate-function", 
            "text": "This returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The object for which the number of distinct occurences needs to be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.9/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.9/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.9/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.9/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.9/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.9/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.9/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.9/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.9/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.5.9/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.5.9/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.5.9/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.5.9/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/4.5.9/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.5.9/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.5.9/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.5.9/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.5.9/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.5.9/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.5.9/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.5.9/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.5.9/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.5.9/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.5.9/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.5.9/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.5.9/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/4.5.9/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.5.9/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.5.9/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.  Syntax  batch()  Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/4.5.9/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.5.9/#delay-window", 
            "text": "A delay window holds events for a specific time period that is regarded as a delay period before processing them.  Syntax  delay( INT|LONG|TIME  window.delay)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.delay \n         The time period (specified in sec, min, ms) for which  the window should delay the events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;  In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.", 
            "title": "delay (Window)"
        }, 
        {
            "location": "/api/4.5.9/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.5.9/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.5.9/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.5.9/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.5.9/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.5.9/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.5.9/#session-window", 
            "text": "This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. When performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period. To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.  Syntax  session( INT|LONG|TIME  window.session,  STRING  window.key,  INT|LONG|TIME  window.allowedlatency)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.session \n         The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.key \n         The grouping attribute for events. \n         default-key \n         STRING \n         Yes \n         No \n     \n     \n         window.allowedlatency \n         This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;  This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.", 
            "title": "session (Window)"
        }, 
        {
            "location": "/api/4.5.9/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.5.9/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.5.9/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 seconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.5.9/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.5.9/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.5.9/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.5.9/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/4.5.9/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.5.9/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.5.9/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.5.9/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.5.9/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.5.9/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.5.0/", 
            "text": "API Docs - v4.5.0\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nThis returns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe object for which the number of distinct occurences needs to be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns '3' when the available values are as follows.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\nThe three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.\n\n\n\nSyntax\n\n\nbatch()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\ndelay \n(Window)\n\n\nA delay window holds events for a specific time period that is regarded as a delay period before processing them.\n\n\n\nSyntax\n\n\ndelay(\nINT|LONG|TIME\n window.delay)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.delay\n\n        \nThe time period (specified in sec, min, ms) for which  the window should delay the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;\n\n\n\n\nIn this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsession \n(Window)\n\n\nThis is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key.\nWhen performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period.\nTo have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.\n\n\n\nSyntax\n\n\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key, \nINT|LONG|TIME\n window.allowedlatency)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.session\n\n        \nThe time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.key\n\n        \nThe grouping attribute for events.\n\n        \ndefault-key\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.allowedlatency\n\n        \nThis specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter).\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;\n\n\n\n\nThis query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events arrived every 20 seconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "4.5.0"
        }, 
        {
            "location": "/api/4.5.0/#api-docs-v450", 
            "text": "", 
            "title": "API Docs - v4.5.0"
        }, 
        {
            "location": "/api/4.5.0/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.5.0/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.0/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.0/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.0/#distinctcount-aggregate-function", 
            "text": "This returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The object for which the number of distinct occurences needs to be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.0/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.0/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.0/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.0/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.0/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.0/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.0/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.0/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/4.5.0/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.5.0/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.5.0/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.5.0/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.5.0/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/4.5.0/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.5.0/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.5.0/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.5.0/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.5.0/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.5.0/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.5.0/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.5.0/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.5.0/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.5.0/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.5.0/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.5.0/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.5.0/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/4.5.0/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.5.0/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.5.0/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.  Syntax  batch()  Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/4.5.0/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.5.0/#delay-window", 
            "text": "A delay window holds events for a specific time period that is regarded as a delay period before processing them.  Syntax  delay( INT|LONG|TIME  window.delay)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.delay \n         The time period (specified in sec, min, ms) for which  the window should delay the events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;  In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.", 
            "title": "delay (Window)"
        }, 
        {
            "location": "/api/4.5.0/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.5.0/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.5.0/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.5.0/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.5.0/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.5.0/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.5.0/#session-window", 
            "text": "This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. When performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period. To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.  Syntax  session( INT|LONG|TIME  window.session,  STRING  window.key,  INT|LONG|TIME  window.allowedlatency)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.session \n         The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.key \n         The grouping attribute for events. \n         default-key \n         STRING \n         Yes \n         No \n     \n     \n         window.allowedlatency \n         This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;  This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.", 
            "title": "session (Window)"
        }, 
        {
            "location": "/api/4.5.0/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.5.0/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.5.0/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 seconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.5.0/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.5.0/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.5.0/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.5.0/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/4.5.0/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.5.0/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.5.0/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.5.0/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.5.0/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.5.0/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.4.8/", 
            "text": "API Docs - v4.4.8\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nThis returns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe object for which the number of distinct occurences needs to be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns '3' when the available values are as follows.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\nThe three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.\n\n\n\nSyntax\n\n\nbatch()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\ndelay \n(Window)\n\n\nA delay window holds events for a specific time period that is regarded as a delay period before processing them.\n\n\n\nSyntax\n\n\ndelay(\nINT|LONG|TIME\n window.delay)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.delay\n\n        \nThe time period (specified in sec, min, ms) for which  the window should delay the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;\n\n\n\n\nIn this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsession \n(Window)\n\n\nThis is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key.\nWhen performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period.\nTo have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.\n\n\n\nSyntax\n\n\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key, \nINT|LONG|TIME\n window.allowedlatency)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.session\n\n        \nThe time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.key\n\n        \nThe grouping attribute for events.\n\n        \ndefault-key\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.allowedlatency\n\n        \nThis specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter).\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;\n\n\n\n\nThis query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events arrived every 20 seconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "4.4.8"
        }, 
        {
            "location": "/api/4.4.8/#api-docs-v448", 
            "text": "", 
            "title": "API Docs - v4.4.8"
        }, 
        {
            "location": "/api/4.4.8/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.4.8/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.8/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.8/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.8/#distinctcount-aggregate-function", 
            "text": "This returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The object for which the number of distinct occurences needs to be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.8/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.8/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.8/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.8/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.8/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.8/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.8/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.8/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.8/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.4.8/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.4.8/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.4.8/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.4.8/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/4.4.8/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.4.8/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.4.8/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.4.8/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.4.8/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.4.8/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.4.8/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.4.8/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.4.8/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.4.8/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.4.8/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.4.8/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.4.8/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/4.4.8/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.4.8/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.4.8/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.  Syntax  batch()  Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/4.4.8/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.4.8/#delay-window", 
            "text": "A delay window holds events for a specific time period that is regarded as a delay period before processing them.  Syntax  delay( INT|LONG|TIME  window.delay)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.delay \n         The time period (specified in sec, min, ms) for which  the window should delay the events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;  In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.", 
            "title": "delay (Window)"
        }, 
        {
            "location": "/api/4.4.8/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.4.8/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.4.8/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.4.8/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.4.8/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.4.8/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.4.8/#session-window", 
            "text": "This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. When performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period. To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.  Syntax  session( INT|LONG|TIME  window.session,  STRING  window.key,  INT|LONG|TIME  window.allowedlatency)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.session \n         The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.key \n         The grouping attribute for events. \n         default-key \n         STRING \n         Yes \n         No \n     \n     \n         window.allowedlatency \n         This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;  This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.", 
            "title": "session (Window)"
        }, 
        {
            "location": "/api/4.4.8/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.4.8/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.4.8/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 seconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.4.8/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.4.8/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.4.8/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.4.8/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log') \ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/4.4.8/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.4.8/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.4.8/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.4.8/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.4.8/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.4.8/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.4.0/", 
            "text": "API Docs - v4.4.0\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nThis returns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe object for which the number of distinct occurences needs to be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns '3' when the available values are as follows.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\nThe three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.\n\n\n\nSyntax\n\n\nbatch()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\ndelay \n(Window)\n\n\nA delay window holds events for a specific time period that is regarded as a delay period before processing them.\n\n\n\nSyntax\n\n\ndelay(\nINT|LONG|TIME\n window.delay)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.delay\n\n        \nThe time period (specified in sec, min, ms) for which  the window should delay the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;\n\n\n\n\nIn this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsession \n(Window)\n\n\nThis is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key.\nWhen performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period.\nTo have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.\n\n\n\nSyntax\n\n\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key, \nINT|LONG|TIME\n window.allowedlatency)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.session\n\n        \nThe time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.key\n\n        \nThe grouping attribute for events.\n\n        \ndefault-key\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.allowedlatency\n\n        \nThis specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter).\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;\n\n\n\n\nThis query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events arrived every 20 seconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "4.4.0"
        }, 
        {
            "location": "/api/4.4.0/#api-docs-v440", 
            "text": "", 
            "title": "API Docs - v4.4.0"
        }, 
        {
            "location": "/api/4.4.0/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.4.0/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.0/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.0/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.0/#distinctcount-aggregate-function", 
            "text": "This returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The object for which the number of distinct occurences needs to be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.0/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.0/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.0/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.0/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.0/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.0/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.0/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.0/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/4.4.0/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.4.0/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.4.0/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.4.0/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.4.0/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/4.4.0/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.4.0/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.4.0/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.4.0/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.4.0/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.4.0/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.4.0/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.4.0/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.4.0/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.4.0/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.4.0/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.4.0/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.4.0/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/4.4.0/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.4.0/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.4.0/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.  Syntax  batch()  Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/4.4.0/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.4.0/#delay-window", 
            "text": "A delay window holds events for a specific time period that is regarded as a delay period before processing them.  Syntax  delay( INT|LONG|TIME  window.delay)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.delay \n         The time period (specified in sec, min, ms) for which  the window should delay the events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;  In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.", 
            "title": "delay (Window)"
        }, 
        {
            "location": "/api/4.4.0/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.4.0/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.4.0/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.4.0/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.4.0/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.4.0/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.4.0/#session-window", 
            "text": "This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. When performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period. To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.  Syntax  session( INT|LONG|TIME  window.session,  STRING  window.key,  INT|LONG|TIME  window.allowedlatency)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.session \n         The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.key \n         The grouping attribute for events. \n         default-key \n         STRING \n         Yes \n         No \n     \n     \n         window.allowedlatency \n         This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;  This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.", 
            "title": "session (Window)"
        }, 
        {
            "location": "/api/4.4.0/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.4.0/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.4.0/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 seconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.4.0/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.4.0/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.4.0/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.4.0/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/4.4.0/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.4.0/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.4.0/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.4.0/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.4.0/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.4.0/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.3.19/", 
            "text": "API Docs - v4.3.19\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nThis returns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe object for which the number of distinct occurences needs to be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns '3' when the available values are as follows.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\nThe three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.\n\n\n\nSyntax\n\n\nbatch()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\ndelay \n(Window)\n\n\nA delay window holds events for a specific time period that is regarded as a delay period before processing them.\n\n\n\nSyntax\n\n\ndelay(\nINT|LONG|TIME\n window.delay)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.delay\n\n        \nThe time period (specified in sec, min, ms) for which  the window should delay the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;\n\n\n\n\nIn this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsession \n(Window)\n\n\nThis is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key.\nWhen performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period.\nTo have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.\n\n\n\nSyntax\n\n\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key, \nINT|LONG|TIME\n window.allowedlatency)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.session\n\n        \nThe time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.key\n\n        \nThe grouping attribute for events.\n\n        \ndefault-key\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.allowedlatency\n\n        \nThis specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter).\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;\n\n\n\n\nThis query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events arrived every 20 seconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "4.3.19"
        }, 
        {
            "location": "/api/4.3.19/#api-docs-v4319", 
            "text": "", 
            "title": "API Docs - v4.3.19"
        }, 
        {
            "location": "/api/4.3.19/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.3.19/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.19/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.19/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.19/#distinctcount-aggregate-function", 
            "text": "This returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The object for which the number of distinct occurences needs to be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.19/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.19/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.19/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.19/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.19/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.19/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.19/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.19/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.19/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.3.19/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.3.19/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.3.19/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.3.19/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/4.3.19/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.3.19/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.3.19/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.3.19/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.3.19/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.3.19/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.3.19/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.3.19/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.3.19/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.3.19/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.3.19/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.3.19/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.3.19/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/4.3.19/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.3.19/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.3.19/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.  Syntax  batch()  Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/4.3.19/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.3.19/#delay-window", 
            "text": "A delay window holds events for a specific time period that is regarded as a delay period before processing them.  Syntax  delay( INT|LONG|TIME  window.delay)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.delay \n         The time period (specified in sec, min, ms) for which  the window should delay the events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;  In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.", 
            "title": "delay (Window)"
        }, 
        {
            "location": "/api/4.3.19/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.3.19/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.3.19/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.3.19/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.3.19/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.3.19/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.3.19/#session-window", 
            "text": "This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. When performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period. To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.  Syntax  session( INT|LONG|TIME  window.session,  STRING  window.key,  INT|LONG|TIME  window.allowedlatency)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.session \n         The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.key \n         The grouping attribute for events. \n         default-key \n         STRING \n         Yes \n         No \n     \n     \n         window.allowedlatency \n         This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;  This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.", 
            "title": "session (Window)"
        }, 
        {
            "location": "/api/4.3.19/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.3.19/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.3.19/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 seconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.3.19/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.3.19/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.3.19/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.3.19/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/4.3.19/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.3.19/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.3.19/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.3.19/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.3.19/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.3.19/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.3.0/", 
            "text": "API Docs - v4.3.0\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nThis returns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe object for which the number of distinct occurences needs to be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns '3' when the available values are as follows.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\nThe three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.\n\n\n\nSyntax\n\n\nbatch()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\ndelay \n(Window)\n\n\nA delay window holds events for a specific time period that is regarded as a delay period before processing them.\n\n\n\nSyntax\n\n\ndelay(\nINT|LONG|TIME\n window.delay)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.delay\n\n        \nThe time period (specified in sec, min, ms) for which  the window should delay the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;\n\n\n\n\nIn this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsession \n(Window)\n\n\nThis is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key.\nWhen performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period.\nTo have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.\n\n\n\nSyntax\n\n\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key, \nINT|LONG|TIME\n window.allowedlatency)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.session\n\n        \nThe time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.key\n\n        \nThe grouping attribute for events.\n\n        \ndefault-key\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.allowedlatency\n\n        \nThis specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter).\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;\n\n\n\n\nThis query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events arrived every 20 seconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "4.3.0"
        }, 
        {
            "location": "/api/4.3.0/#api-docs-v430", 
            "text": "", 
            "title": "API Docs - v4.3.0"
        }, 
        {
            "location": "/api/4.3.0/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.3.0/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.0/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.0/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.0/#distinctcount-aggregate-function", 
            "text": "This returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The object for which the number of distinct occurences needs to be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.0/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.0/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.0/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.0/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.0/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.0/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.0/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.0/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/4.3.0/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.3.0/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.3.0/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.3.0/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.3.0/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/4.3.0/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.3.0/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.3.0/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.3.0/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.3.0/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.3.0/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.3.0/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.3.0/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.3.0/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.3.0/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.3.0/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.3.0/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.3.0/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/4.3.0/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.3.0/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.3.0/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.  Syntax  batch()  Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/4.3.0/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.3.0/#delay-window", 
            "text": "A delay window holds events for a specific time period that is regarded as a delay period before processing them.  Syntax  delay( INT|LONG|TIME  window.delay)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.delay \n         The time period (specified in sec, min, ms) for which  the window should delay the events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;  In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.", 
            "title": "delay (Window)"
        }, 
        {
            "location": "/api/4.3.0/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.3.0/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.3.0/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.3.0/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.3.0/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.3.0/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.3.0/#session-window", 
            "text": "This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. When performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period. To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.  Syntax  session( INT|LONG|TIME  window.session,  STRING  window.key,  INT|LONG|TIME  window.allowedlatency)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.session \n         The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.key \n         The grouping attribute for events. \n         default-key \n         STRING \n         Yes \n         No \n     \n     \n         window.allowedlatency \n         This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;  This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.", 
            "title": "session (Window)"
        }, 
        {
            "location": "/api/4.3.0/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.3.0/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.3.0/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 seconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.3.0/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.3.0/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.3.0/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.3.0/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/4.3.0/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.3.0/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.3.0/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.3.0/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.3.0/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.3.0/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.2.40/", 
            "text": "API Docs - v4.2.40\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nThis returns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe object for which the number of distinct occurences needs to be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns '3' when the available values are as follows.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\nThe three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.\n\n\n\nSyntax\n\n\nbatch()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\ndelay \n(Window)\n\n\nA delay window holds events for a specific time period that is regarded as a delay period before processing them.\n\n\n\nSyntax\n\n\ndelay(\nINT|LONG|TIME\n window.delay)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.delay\n\n        \nThe time period (specified in sec, min, ms) for which  the window should delay the events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;\n\n\n\n\nIn this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsession \n(Window)\n\n\nThis is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key.\nWhen performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period.\nTo have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.\n\n\n\nSyntax\n\n\nsession(\nINT|LONG|TIME\n window.session, \nSTRING\n window.key, \nINT|LONG|TIME\n window.allowedlatency)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.session\n\n        \nThe time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.key\n\n        \nThe grouping attribute for events.\n\n        \ndefault-key\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.allowedlatency\n\n        \nThis specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter).\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;\n\n\n\n\nThis query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events arrived every 20 seconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "4.2.40"
        }, 
        {
            "location": "/api/4.2.40/#api-docs-v4240", 
            "text": "", 
            "title": "API Docs - v4.2.40"
        }, 
        {
            "location": "/api/4.2.40/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.2.40/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.40/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.40/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.40/#distinctcount-aggregate-function", 
            "text": "This returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The object for which the number of distinct occurences needs to be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.40/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.40/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.40/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.40/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.40/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.40/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.40/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.40/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.40/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.2.40/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.2.40/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.2.40/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.2.40/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/4.2.40/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.2.40/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.2.40/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.2.40/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.2.40/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.2.40/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.2.40/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.2.40/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.2.40/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.2.40/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.2.40/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.2.40/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.2.40/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/4.2.40/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.2.40/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.2.40/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.  Syntax  batch()  Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/4.2.40/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.2.40/#delay-window", 
            "text": "A delay window holds events for a specific time period that is regarded as a delay period before processing them.  Syntax  delay( INT|LONG|TIME  window.delay)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.delay \n         The time period (specified in sec, min, ms) for which  the window should delay the events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window delayWindow(symbol string, volume int) delay(1 hour);\ndefine stream PurchaseStream(symbol string, volume int);\ndefine stream DeliveryStream(symbol string);\ndefine stream OutputStream(symbol string);\n\n@info(name='query1') \nfrom PurchaseStream\nselect symbol, volume\ninsert into delayWindow;\n\n@info(name='query2') \nfrom delayWindow join DeliveryStream\non delayWindow.symbol == DeliveryStream.symbol\nselect delayWindow.symbol\ninsert into OutputStream;  In this example, purchase events that arrive in the 'PurchaseStream' stream are directed to a delay window. At any given time, this delay window holds purchase events that have arrived within the last hour. These purchase events in the window are matched by the 'symbol' attribute, with delivery events that arrive in the 'DeliveryStream' stream. This monitors whether the delivery of products is done with a minimum delay of one hour after the purchase.", 
            "title": "delay (Window)"
        }, 
        {
            "location": "/api/4.2.40/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.2.40/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.2.40/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.2.40/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.2.40/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.2.40/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.2.40/#session-window", 
            "text": "This is a session window that holds events that belong to a specific session. The events that belong to a specific session are identified by a grouping attribute (i.e., a session key). A session gap period is specified to determine the time period after which the session is considered to be expired. A new event that arrives with a specific value for the session key is matched with the session window with the same session key. When performing aggregations for a specific session, you can include events with the matching session key that arrive after the session is expired if required. This is done by specifying a latency time period that is less than the session gap period. To have aggregate functions with session windows, the events need to be grouped by the session key via a 'group by' clause.  Syntax  session( INT|LONG|TIME  window.session,  STRING  window.key,  INT|LONG|TIME  window.allowedlatency)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.session \n         The time period for which the session considered is valid. This is specified in seconds, minutes, or milliseconds (i.e., 'min', 'sec', or 'ms'. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.key \n         The grouping attribute for events. \n         default-key \n         STRING \n         Yes \n         No \n     \n     \n         window.allowedlatency \n         This specifies the time period for which the session window is valid after the expiration of the session. The time period specified here should be less than the session time gap (which is specified via the 'window.session' parameter). \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream PurchaseEventStream (user string, item_number int, price float, quantity int);\n\n@info(name='query0) \nfrom PurchaseEventStream#window.session(5 sec, user, 2 sec) \nselect * \ninsert all events into OutputStream;  This query processes events that arrive at the PurchaseEvent input stream. The 'user' attribute is the session key, and the session gap is 5 seconds. '2 sec' is specified as the allowed latency. Therefore, events with the matching user name that arrive 2 seconds after the expiration of the session are also considered when performing aggregations for the session identified by the given user name.", 
            "title": "session (Window)"
        }, 
        {
            "location": "/api/4.2.40/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.2.40/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.2.40/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 seconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.2.40/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.2.40/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.2.40/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.2.40/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/4.2.40/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.2.40/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.2.40/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.2.40/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.2.40/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.2.40/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.2.20/", 
            "text": "API Docs - v4.2.20\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nThis returns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe object for which the number of distinct occurences needs to be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns '3' when the available values are as follows.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\nThe three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.\n\n\n\nSyntax\n\n\nbatch()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events arrived every 20 seconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "4.2.20"
        }, 
        {
            "location": "/api/4.2.20/#api-docs-v4220", 
            "text": "", 
            "title": "API Docs - v4.2.20"
        }, 
        {
            "location": "/api/4.2.20/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.2.20/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.20/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.20/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.20/#distinctcount-aggregate-function", 
            "text": "This returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The object for which the number of distinct occurences needs to be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns '3' when the available values are as follows. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" The three distinct occurences identified are 'WEB_PAGE_1', 'WEB_PAGE_2', and 'WEB_PAGE_3'.", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.20/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.20/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.20/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.20/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.20/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.20/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.20/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.20/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.20/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.2.20/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.2.20/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.2.20/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.2.20/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/4.2.20/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.2.20/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.2.20/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.2.20/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.2.20/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.2.20/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.2.20/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.2.20/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.2.20/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.2.20/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.2.20/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.2.20/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.2.20/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/4.2.20/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.2.20/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.2.20/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.  Syntax  batch()  Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/4.2.20/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.2.20/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.2.20/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.2.20/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.2.20/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.2.20/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.2.20/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.2.20/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.2.20/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.2.20/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 seconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.2.20/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.2.20/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.2.20/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.2.20/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/4.2.20/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.2.20/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.2.20/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.2.20/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.2.20/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.2.20/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.2.0/", 
            "text": "API Docs - v4.2.0\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.\n\n\n\nSyntax\n\n\nbatch()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events arrived every 20 seconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "4.2.0"
        }, 
        {
            "location": "/api/4.2.0/#api-docs-v420", 
            "text": "", 
            "title": "API Docs - v4.2.0"
        }, 
        {
            "location": "/api/4.2.0/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.2.0/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.0/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.0/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.0/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.0/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.0/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.0/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.0/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.0/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.0/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.0/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.0/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/4.2.0/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.2.0/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.2.0/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.2.0/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.2.0/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/4.2.0/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.2.0/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.2.0/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.2.0/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.2.0/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.2.0/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.2.0/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.2.0/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.2.0/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.2.0/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.2.0/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.2.0/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.2.0/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/4.2.0/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.2.0/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.2.0/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.  Syntax  batch()  Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/4.2.0/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.2.0/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.2.0/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.2.0/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.2.0/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.2.0/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.2.0/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.2.0/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.2.0/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.2.0/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 seconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.2.0/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.2.0/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.2.0/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.2.0/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/4.2.0/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.2.0/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.2.0/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.2.0/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.2.0/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.2.0/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.1.64/", 
            "text": "API Docs - v4.1.64\n\n\nCore\n\n\nand \n(Aggregate Function)\n\n\nReturns the results of AND operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n and(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be AND operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nor \n(Aggregate Function)\n\n\nReturns the results of OR operation for all the events.\n\n\n\nSyntax\n\n\nBOOL\n or(\nBOOL\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be OR operation.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;\n\n\n\n\nThis will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nunionSet \n(Aggregate Function)\n\n\nUnion multiple sets. \nThis attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.\n\n\n\nSyntax\n\n\nOBJECT\n unionSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe java.util.Set object that needs to be added into the union set.\n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;\n\n\n\n\ndistinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncreateSet \n(Function)\n\n\nIncludes the given input parameter in a java.util.HashSet and returns the set. \n\n\n\nSyntax\n\n\nOBJECT\n createSet(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n input)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ninput\n\n        \nThe input that needs to be added into the set.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;\n\n\n\n\nFor every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nsizeOfSet \n(Function)\n\n\nReturns the size of an object of type java.util.Set.\n\n\n\nSyntax\n\n\nINT\n sizeOfSet(\nOBJECT\n set)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nset\n\n        \nThe set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi. \n\n        \n\n        \nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;\n\n\n\n\nThe sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nbatch \n(Window)\n\n\nA window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.\n\n\n\nSyntax\n\n\nbatch()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;\n\n\n\n\nThis will output comma separated items IDs that have the same price for each incoming batch of events.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events arrived every 20 seconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "4.1.64"
        }, 
        {
            "location": "/api/4.1.64/#api-docs-v4164", 
            "text": "", 
            "title": "API Docs - v4.1.64"
        }, 
        {
            "location": "/api/4.1.64/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.1.64/#and-aggregate-function", 
            "text": "Returns the results of AND operation for all the events.  Syntax  BOOL  and( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be AND operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect and(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for AND operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "and (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.64/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.64/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.64/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.64/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.64/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.64/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.64/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.64/#or-aggregate-function", 
            "text": "Returns the results of OR operation for all the events.  Syntax  BOOL  or( BOOL  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be OR operation. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from cscStream#window.lengthBatch(10)\nselect or(isFraud) as isFraudTransaction\ninsert into alertStream;  This will returns the result for OR operation of isFraud values as a boolean value for event chunk expiry by window length batch.", 
            "title": "or (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.64/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.64/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.64/#unionset-aggregate-function", 
            "text": "Union multiple sets.  This attribute aggregator maintains a union of sets. The given input set is put into the union set and the union set is returned.  Syntax  OBJECT  unionSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The java.util.Set object that needs to be added into the union set. \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream \n\nfrom initStream#window.timeBatch(10 sec) \nselect unionSet(initialSet) as distinctSymbols \ninsert into distinctStockStream;  distinctStockStream will return the set object which contains the distinct set of stock symbols received during a sliding window of 10 seconds.", 
            "title": "unionSet (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.64/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.1.64/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.1.64/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.1.64/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.1.64/#createset-function", 
            "text": "Includes the given input parameter in a java.util.HashSet and returns the set.   Syntax  OBJECT  createSet( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  input)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         input \n         The input that needs to be added into the set. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect createSet(symbol) as initialSet \ninsert into initStream;  For every incoming stockStream event, the initStream stream will produce a set object having only one element: the symbol in the incoming stockStream.", 
            "title": "createSet (Function)"
        }, 
        {
            "location": "/api/4.1.64/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.1.64/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.1.64/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.1.64/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.1.64/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.1.64/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.1.64/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.1.64/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.1.64/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.1.64/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.1.64/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.1.64/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.1.64/#sizeofset-function", 
            "text": "Returns the size of an object of type java.util.Set.  Syntax  INT  sizeOfSet( OBJECT  set)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         set \n         The set object. This parameter should be of type java.util.Set. A set object may be created by the 'set' attribute aggregator in Siddhi.  \n         \n         OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from stockStream \nselect initSet(symbol) as initialSet \ninsert into initStream; \n\n;from initStream#window.timeBatch(10 sec) \nselect union(initialSet) as distinctSymbols \ninsert into distinctStockStream; \n\nfrom distinctStockStream \nselect sizeOfSet(distinctSymbols) sizeOfSymbolSet \ninsert into sizeStream;  The sizeStream stream will output the number of distinct stock symbols received during a sliding window of 10 seconds.", 
            "title": "sizeOfSet (Function)"
        }, 
        {
            "location": "/api/4.1.64/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.1.64/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.1.64/#batch-window", 
            "text": "A window that holds an incoming events batch. When a new set of events arrives, the previously arrived old events will be expired. Batch window can be used to aggregate events that comes in batches.  Syntax  batch()  Examples  EXAMPLE 1  define stream consumerItemStream (itemId string, price float)\n\nfrom consumerItemStream#window.batch()\nselect price, str:groupConcat(itemId) as itemIds\ngroup by price\ninsert into outputStream;  This will output comma separated items IDs that have the same price for each incoming batch of events.", 
            "title": "batch (Window)"
        }, 
        {
            "location": "/api/4.1.64/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.1.64/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.1.64/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.1.64/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.1.64/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.1.64/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.1.64/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.1.64/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.1.64/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.1.64/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 seconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.1.64/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.1.64/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.1.64/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.1.64/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/4.1.64/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.1.64/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.1.64/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.1.64/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.1.64/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.1.64/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'))\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.1.46/", 
            "text": "API Docs - v4.1.46\n\n\nCore\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger logs the message on the given priority with or without processed event.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE).\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis message will be logged.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nTo log the processed event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events arrived every 20 seconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "4.1.46"
        }, 
        {
            "location": "/api/4.1.46/#api-docs-v4146", 
            "text": "", 
            "title": "API Docs - v4.1.46"
        }, 
        {
            "location": "/api/4.1.46/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.1.46/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.46/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.46/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.46/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.46/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.46/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.46/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.46/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.46/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.46/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.1.46/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.1.46/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.1.46/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.1.46/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.1.46/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.1.46/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.1.46/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.1.46/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.1.46/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.1.46/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.1.46/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.1.46/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.1.46/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.1.46/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.1.46/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.1.46/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.1.46/#log-stream-processor", 
            "text": "The logger logs the message on the given priority with or without processed event.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message (INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE). \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         log.message \n         This message will be logged. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         To log the processed event. \n         true \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.1.46/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.1.46/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.1.46/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.1.46/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.1.46/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.1.46/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.1.46/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.1.46/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.1.46/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.1.46/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 seconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.1.46/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.1.46/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.1.46/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.1.46/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/4.1.46/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.1.46/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.1.46/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.1.46/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.1.46/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.1.46/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.1.7/", 
            "text": "API Docs - v4.1.7\n\n\nCore\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events arrived every 20 seconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "4.1.7"
        }, 
        {
            "location": "/api/4.1.7/#api-docs-v417", 
            "text": "", 
            "title": "API Docs - v4.1.7"
        }, 
        {
            "location": "/api/4.1.7/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.1.7/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.7/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.7/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.7/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.7/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.7/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.7/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.7/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.7/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.7/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.1.7/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.1.7/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.1.7/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.1.7/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.1.7/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.1.7/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.1.7/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.1.7/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.1.7/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.1.7/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.1.7/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.1.7/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.1.7/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.1.7/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.1.7/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.1.7/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.1.7/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.1.7/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.1.7/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.1.7/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.1.7/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.1.7/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.1.7/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.1.7/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.1.7/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.1.7/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.1.7/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 seconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.1.7/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.1.7/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.1.7/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.1.7/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/4.1.7/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.1.7/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.1.7/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.1.7/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.1.7/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.1.7/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.1.0/", 
            "text": "API Docs - v4.1.0\n\n\nCore\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events arrived every 20 seconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "4.1.0"
        }, 
        {
            "location": "/api/4.1.0/#api-docs-v410", 
            "text": "", 
            "title": "API Docs - v4.1.0"
        }, 
        {
            "location": "/api/4.1.0/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.1.0/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.0/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.0/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.0/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.0/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.0/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.0/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.0/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.0/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.1.0/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.1.0/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.1.0/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.1.0/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.1.0/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.1.0/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.1.0/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.1.0/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.1.0/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.1.0/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.1.0/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.1.0/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.1.0/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.1.0/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.1.0/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.1.0/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.1.0/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.1.0/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.1.0/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.1.0/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.1.0/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.1.0/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.1.0/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.1.0/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.1.0/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.1.0/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.1.0/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.1.0/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 seconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.1.0/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.1.0/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.1.0/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.1.0/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/4.1.0/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.1.0/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.1.0/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.1.0/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.1.0/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.1.0/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.0.9/", 
            "text": "API Docs - v4.0.9\n\n\nCore\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime.\n\n        \nTimestamp of first event\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch.\n\n        \nSystem waits till an event from next batch arrives to flush current batch\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \nTimestamp of first event\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events arrived every 20 seconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "4.0.9"
        }, 
        {
            "location": "/api/4.0.9/#api-docs-v409", 
            "text": "", 
            "title": "API Docs - v4.0.9"
        }, 
        {
            "location": "/api/4.0.9/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.9/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.9/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.9/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.9/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.9/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.9/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.9/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.9/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.9/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.9/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.0.9/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.0.9/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.0.9/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.0.9/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.0.9/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.0.9/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.9/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.0.9/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.0.9/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.0.9/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.0.9/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.0.9/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.0.9/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.0.9/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.0.9/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.0.9/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.0.9/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.9/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.0.9/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( LONG  timestamp,  INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.0.9/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. \n         Timestamp of first event \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. \n         System waits till an event from next batch arrives to flush current batch \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.9/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.0.9/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.0.9/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.9/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.0.9/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.0.9/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.0.9/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         Timestamp of first event \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 seconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.9/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.0.9/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.9/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.0.9/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/4.0.9/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.9/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.0.9/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.9/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.0.9/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.9/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.0.0/", 
            "text": "API Docs - v4.0.0\n\n\nCore\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,'High','Low') as status\ninsert into outputStream;\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = 'query1')\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nlog \n(Sink)\n\n\nThis is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix\n\n\n\nSyntax\n\n\n@sink(type=\nlog\n, priority=\nSTRING\n, prefix=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThis will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE\n\n        \nINFO\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nprefix\n\n        \nThis will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\"\n\n        \ndefault prefix will be \n : \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.\n\n\n\nEXAMPLE 2\n\n\n@sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form \nSiddhi App Name\n : \nStream Name\n\n\n\nEXAMPLE 3\n\n\n@sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.\n\n\n\nEXAMPLE 4\n\n\n@sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "4.0.0"
        }, 
        {
            "location": "/api/4.0.0/#api-docs-v400", 
            "text": "", 
            "title": "API Docs - v4.0.0"
        }, 
        {
            "location": "/api/4.0.0/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.0.0/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp, 'double') as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.0.0/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce('123', null, '789') as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.0.0/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp, 'double') as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp, 'int') as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.0.0/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.0.0/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.0.0/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.0/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35,'High','Low') as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name = 'query1')\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name = 'query1')\nfrom userEventStream\nselect userName, ifThenElse(password == 'admin', true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.0.0/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.0.0/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.0.0/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.0.0/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.0.0/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.0.0/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.0.0/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.0.0/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1') from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.0.0/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.0.0/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.0/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron('*/5 * * * * ?');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.0.0/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.0.0/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name = 'query1')\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.0.0/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.0.0/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = 'query0')\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name = 'query1')\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.0.0/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, 'asc');\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.0.0/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.0.0/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = 'query0')\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = 'query1')\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.0.0/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.0.0/#log-sink", 
            "text": "This is a sink that can be used as a logger. This will log the output events in the output stream with user specified priority and a prefix  Syntax  @sink(type= log , priority= STRING , prefix= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         This will set the logger priority i.e log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE \n         INFO \n         STRING \n         Yes \n         No \n     \n     \n         prefix \n         This will be the prefix to the output message. If the output stream has event [2,4] and the prefix is given as \"Hello\" then the log will show \"Hello : [2,4]\" \n         default prefix will be   :  \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='log', prefix='My Log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. Also the priority is set to DEBUG.  EXAMPLE 2  @sink(type='log', priority='DEBUG'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the priority is set to DEBUG. User has not specified prefix so the default prefix will be in the form  Siddhi App Name  :  Stream Name  EXAMPLE 3  @sink(type='log', prefix='My Log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink and the prefix is given as My Log. User has not given a priority so it will be set to default INFO.  EXAMPLE 4  @sink(type='log'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses log sink. The user has not given prefix or priority so they will be set to their default values.", 
            "title": "log (Sink)"
        }, 
        {
            "location": "/api/4.0.0/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.0.0/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.0.0/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type='tcp', @map(type='passThrough'),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}